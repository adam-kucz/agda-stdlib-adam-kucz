{-# OPTIONS --exact-split --safe --prop  #-}
module Logic.Exists where

open import PropUniverses
open import Proposition.Identity.Definition using (_==_; refl)
open import Proposition.Sum.Definition
  using (_โง_; _,_) renaming (left to โงleft; right to โงright)
open import Proposition.Sum.Definition using (โ; _,_) public

open import Logic.Iff

โ! : {X : ๐ฐ ห} (๐ด : (x : X) โ ๐ฑ แต) โ ๐ฐ โ ๐ฑ แต
โ! {X = X} ๐ด = โ ฮป (x : X) โ ๐ด x โง โ y (p : ๐ด y) โ y == x

โโโ!โโ! : (p : โ x โ ๐ด x โ ๐ต x) โ โ! ๐ด โ โ! ๐ต
โถ (โโโ!โโ! p) (x , (pa , !)) = x , (โถ (p x) pa , ฮป y pb โ ! y (โต (p y) pb))
โต (โโโ!โโ! p) (x , (pb , !)) = x , (โต (p x) pb , ฮป y pa โ ! y (โถ (p y) pa))

โ!-of-type : (X : ๐ฐ ห) โ ๐ฐ แต
โ!-of-type X = โ ฮป (x : X) โ โ y โ y == x

โ!== : โ(!A : โ! ๐ด){x y}(p : ๐ด x)(q : ๐ด y) โ x == y
โ!== (z , (_ , !z)) {x}{y} p q with refl z โ !z x p | refl z โ !z y q = refl z

โ!-of-type== : (!X : โ!-of-type X)(x y : X) โ x == y
โ!-of-type== (z , !X) x y with refl z โ !X x | refl z โ !X y = refl z

โ!โโ : (!A : โ! ๐ด) โ โ ๐ด
โ!โโ (x , (p , _)) = x , p
