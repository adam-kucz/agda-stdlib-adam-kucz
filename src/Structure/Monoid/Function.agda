{-# OPTIONS --exact-split --safe --prop #-}
open import Universes
open import Structure.Monoid.Definition

module Structure.Monoid.Function
  {X : ùí∞ Àô}
  ‚¶É M : Monoid X ‚¶Ñ
  where

open import Operation.Binary
open import Data.List.Definition
open import Data.List.Operation
open import Proof

mconcat : (l : List X) ‚Üí X
mconcat [] = e
mconcat (h ‚à∑ l) = h ‚àô mconcat l

mconcat-++ : ‚àÄ l l'
  ‚Üí ----------------------------------------
  mconcat (l ++ l') == mconcat l ‚àô mconcat l'
mconcat-++ [] l' = sym $ left-unit (mconcat l')
mconcat-++ (h ‚à∑ l) l' =
  proof h ‚àô mconcat (l ++ l')
    === h ‚àô (mconcat l ‚àô mconcat l')
      :by: ap (h ‚àô_) $ mconcat-++ l l'
    === h ‚àô mconcat l ‚àô mconcat l'
      :by: assoc h _ _
  qed

