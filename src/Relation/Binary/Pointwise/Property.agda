{-# OPTIONS --exact-split --prop #-}
module Relation.Binary.Pointwise.Property where

open import Relation.Binary.Pointwise.Definition
open import Relation.Binary
open import Relation.Binary.ReflexiveTransitiveClosure
  renaming (refl-trans-close to rtc)

open import Universes
open import Type.Finite
open import Proposition.Sum
open import Proposition.Decidable
open import Data.Nat
open import Data.List hiding (last)
open import Data.Vec
open import Collection hiding (_~_)
open import Logic
open import Proof

open import Axiom.FunctionExtensionality

ptwise-rtc-commute :
  {R : BinRel ùí∞ Y}
  ‚¶É reflexive : Reflexive R ‚¶Ñ
  (p : is-finite X)
  ‚¶É dec : HasDecidableIdentity X ‚¶Ñ
  ‚Üí ------------------------------------------
  Pointwise {X = X} (rtc R) ~ rtc (Pointwise R)
subrel ‚¶É ~-‚äÜ ‚¶É ptwise-rtc-commute {Y = Y}{X = X}{R = R} (l , p) ‚¶Ñ ‚¶Ñ {f} {g} x‚Üíf~g = {!!}
  where open import Proposition.Wrapped
        vec-to-f : (v : Vec Y (len l)) ‚Üí Wrapped (X ‚Üí Y)
        go :
          {f g : X ‚Üí Y}
          (l : List (Œ£‚Çö Œª x ‚Üí
                     ‚àÉ Œª y‚ÇÄ ‚Üí 
                     ‚àÉ Œª y‚ÇÅ ‚Üí
                       y‚ÇÄ == f x ‚àß y‚ÇÅ == g x ‚àß rtc R y‚ÇÄ y‚ÇÅ))
          (p : contains-all X (map elem l))
          ‚Üí --------------------
          ‚àÉ Œª n ‚Üí ‚àÉ Œª (l : Vec (Vec Y (len l)) (n +1)) ‚Üí {!vec-to-f!}
        go = {!!}
        vec-to-f v = wrap Œª x ‚Üí v ! index (p x) [ index‚â§ (p x) ]
--   step (Œª x ‚Üí ‚ä•-recursion _ $ x ‚àâ‚àÖ $ p x) (rfl g)
-- subrel ‚¶É ~-‚äÜ ‚¶É ptwise-rtc-commute (x ‚à∑ l , p) ‚¶Ñ ‚¶Ñ {f} {g} x‚Üíf~g = {!!}
subrel ‚¶É ~-‚äá ‚¶É ptwise-rtc-commute p ‚¶Ñ ‚¶Ñ (rfl f) x = rfl (f x)
subrel ‚¶É ~-‚äá ‚¶É ptwise-rtc-commute p ‚¶Ñ ‚¶Ñ (step f~g g~*h) x =
  step (f~g x) $ subrel ‚¶É ~-‚äá ‚¶É ptwise-rtc-commute p ‚¶Ñ ‚¶Ñ g~*h x
