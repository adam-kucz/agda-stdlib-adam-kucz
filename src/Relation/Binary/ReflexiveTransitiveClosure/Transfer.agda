{-# OPTIONS --exact-split --safe --prop #-}
open import Relation.Binary.Definition
open import Relation.Binary.Property
open import Relation.Binary.ReflexiveTransitiveClosure.Definition
  renaming (refl-trans-close to rtc)

open import Universes

module Relation.Binary.ReflexiveTransitiveClosure.Transfer
  (R : BinRel ùí∞ X)
  (single-step : BinRel ùí± X)
  ‚¶É equiv : R ~ rtc single-step ‚¶Ñ
  where

open import Proposition.Function using (_$_)
open import Function.Proof

open import Relation.Binary.ReflexiveTransitiveClosure.Property

instance
  ReflexiveR : Reflexive R
  TransitiveR : Transitive R

InheritsSymmetricR :
  ‚¶É symmetric : Symmetric single-step ‚¶Ñ
  ‚Üí ----------------------------------------
  Symmetric R
InheritsRelatingR :
  {single-step-P : BinRel ùí≤ Y}
  {P : BinRel ùíØ Y}
  ‚¶É equiv : P ~ rtc single-step-P ‚¶Ñ
  {f : X ‚Üí Y}
  ‚¶É ss-rel : Relating f single-step single-step-P ‚¶Ñ
  ‚Üí ----------------------
  Relating f R P

refl ‚¶É ReflexiveR ‚¶Ñ x = subrel $ refl x
trans ‚¶É TransitiveR ‚¶Ñ p q = subrel $ trans (subrel p) (subrel q)

sym ‚¶É InheritsSymmetricR ‚¶Ñ p = subrel $ sym $ subrel p
rel-preserv ‚¶É InheritsRelatingR ‚¶Ñ aRb = subrel $ rel-preserv $ subrel aRb

Subrelation-rtcR-R : rtc R ‚äÜ R
subrel‚äÜ Subrelation-rtcR-R p =
  subrel $ subrel $ subrel {sup = rtc (rtc single-step)} p
