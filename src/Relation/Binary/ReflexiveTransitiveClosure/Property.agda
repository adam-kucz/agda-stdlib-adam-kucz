{-# OPTIONS --exact-split --safe --prop #-}
module Relation.Binary.ReflexiveTransitiveClosure.Property where

open import Relation.Binary.ReflexiveTransitiveClosure.Definition
open import Relation.Binary.Definition
open import Relation.Binary.Property

open import Universes
open import Function.Proof

private variable R : BinRel ùí∞ X

instance
  Reflexive-rtc : Reflexive (refl-trans-close R)
  Transitive-rtc : Transitive (refl-trans-close R)
  InheritsSymmetric-rtc :
    ‚¶É s : Symmetric R ‚¶Ñ
    ‚Üí -----------------------------
    Symmetric (refl-trans-close R)
  Subrelation-rtc : R ‚äÜ refl-trans-close R
  Subrelation-rtc2 :
    refl-trans-close (refl-trans-close R) ‚äÜ refl-trans-close R
  Subrelation-2-Subrelation-rtc :
    {P : BinRel ùí± X}
    ‚¶É R‚äÜP : R ‚äÜ P ‚¶Ñ
    ‚Üí ----------------------------------------
    refl-trans-close R ‚äÜ refl-trans-close P
  Relating-rtc :
    {P : BinRel ùí∞ X}
    {R : BinRel ùí± Y}
    {f : (x : X) ‚Üí Y}
    ‚¶É _ : Relating f P R ‚¶Ñ
    ‚Üí ----------------------
    Relating f (refl-trans-close P) (refl-trans-close R)

refl ‚¶É Reflexive-rtc ‚¶Ñ = rfl
trans ‚¶É Transitive-rtc ‚¶Ñ (rfl _) q = q
trans ‚¶É Transitive-rtc ‚¶Ñ (step s p) q = step s (trans p q)
sym ‚¶É InheritsSymmetric-rtc ‚¶Ñ (rfl a) = rfl a
sym ‚¶É InheritsSymmetric-rtc ‚¶Ñ (step aRb p) = step-right (sym p) (sym aRb)

subrel ‚¶É Subrelation-rtc ‚¶Ñ {x} {y} xRy = step xRy (refl y)

subrel ‚¶É Subrelation-rtc2 ‚¶Ñ (rfl a) = refl a
subrel ‚¶É Subrelation-rtc2 ‚¶Ñ (step xR*z zR**y) =
  trans xR*z (subrel ‚¶É Subrelation-rtc2 ‚¶Ñ zR**y)

subrel ‚¶É Subrelation-2-Subrelation-rtc ‚¶Ñ {x} {x} (rfl x) = refl x
subrel ‚¶É Subrelation-2-Subrelation-rtc ‚¶Ñ {x} {y} (step aRb bR*y) =
  step (subrel aRb) (subrel bR*y)

rel-preserv ‚¶É Relating-rtc {f = f} ‚¶Ñ (rfl a) = rfl (f a)
rel-preserv ‚¶É Relating-rtc ‚¶Ñ (step aRb aR*b) =
  step (rel-preserv aRb) (rel-preserv aR*b)

subrel-rtc-to-rtc-subrel-rtc :
  {P : BinRel ùí± X}
  ‚¶É s : P ‚äÜ refl-trans-close R ‚¶Ñ
  ‚Üí -----------------------------------------
  refl-trans-close P ‚äÜ refl-trans-close R
subrel-rtc-to-rtc-subrel-rtc {R = _R_} {P = _P_} = go
  where go : refl-trans-close _P_ ‚äÜ refl-trans-close _R_
        subrel ‚¶É go ‚¶Ñ (rfl a) = refl a
        subrel ‚¶É go ‚¶Ñ (step {x} {b} {y} xPb bP*y) =
          trans (subrel xPb) (subrel ‚¶É go ‚¶Ñ bP*y)
