{-# OPTIONS --exact-split --prop  #-}
module Data.Tree.Binary.Functor where

open import Data.Tree.Binary.Definition
open import Data.Tree.Binary.Function

open import Universes
open import Data.Functor
open import Data.Applicative
open import Data.Monad
open import Function
  renaming (_‚àò‚Çõ_ to _‚àò_; _$_ to _$'_)
  using (universe-of; uncurry; id; ùëñùëë; ==‚Üí~; _~_)
open import Proof

instance
  BinaryTreeFunctor : Functor {U = universe-of} (Œª X ‚Üí BinaryTree X)
  BinaryTreeApplicative : Applicative {U = universe-of} (Œª X ‚Üí BinaryTree X)
  BinaryTreeMonad : Monad {U = universe-of} (Œª X ‚Üí BinaryTree X)

open import Axiom.FunctionExtensionality

fmap ‚¶É BinaryTreeFunctor ‚¶Ñ = map
fmap-id ‚¶É BinaryTreeFunctor ‚¶Ñ = subrel $ fun-ext go
  where go : map (ùëñùëë X) ~ id
        go (leaf x) = Het.refl (leaf x)
        go (l /\ r) = ap2 _/\_ (go l) (go r)  
fmap-‚àò ‚¶É BinaryTreeFunctor ‚¶Ñ g f = subrel {sup = _==_} $ fun-ext go
  where go : map (g ‚àò f) ~ map g ‚àò map f
        go (leaf x) = Het.refl (leaf (g (f x)))
        go (l /\ r) = ap2 _/\_ (go l) (go r)  

open import Type.Unit
open import Type.Sum

functor ‚¶É BinaryTreeApplicative ‚¶Ñ = BinaryTreeFunctor
unit ‚¶É BinaryTreeApplicative ‚¶Ñ = leaf ‚ãÜ
_‚ãÜ_ ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) = map (x ,_)
_‚ãÜ_ ‚¶É BinaryTreeApplicative ‚¶Ñ (l /\ r) y =
  _‚ãÜ_ ‚¶É BinaryTreeApplicative ‚¶Ñ l y /\
  _‚ãÜ_ ‚¶É BinaryTreeApplicative ‚¶Ñ r y
fmap-def ‚¶É BinaryTreeApplicative ‚¶Ñ f (leaf x) = Id.refl (leaf (f x))
fmap-def ‚¶É BinaryTreeApplicative ‚¶Ñ f (l /\ r) =
  ap2 _/\_ (fmap-def ‚¶É BinaryTreeApplicative ‚¶Ñ f l)
           (fmap-def ‚¶É BinaryTreeApplicative ‚¶Ñ f r)
naturality ‚¶É BinaryTreeApplicative ‚¶Ñ f g (leaf x) (leaf x') =
  Id.refl (leaf (f x , g x'))
naturality ‚¶É BinaryTreeApplicative ‚¶Ñ f g (leaf x) (l' /\ r') =
  ap2 _/\_ (naturality ‚¶É BinaryTreeApplicative ‚¶Ñ f g (leaf x) l')
           (naturality ‚¶É BinaryTreeApplicative ‚¶Ñ f g (leaf x) r')
naturality ‚¶É BinaryTreeApplicative ‚¶Ñ f g (l /\ r) v =
  ap2 _/\_ (naturality ‚¶É BinaryTreeApplicative ‚¶Ñ f g l v)
           (naturality ‚¶É BinaryTreeApplicative ‚¶Ñ f g r v)
left-identity ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) = Id.refl (leaf x)
left-identity ‚¶É BinaryTreeApplicative ‚¶Ñ (l /\ r) =
  ap2 _/\_ (left-identity ‚¶É BinaryTreeApplicative ‚¶Ñ l)
           (left-identity ‚¶É BinaryTreeApplicative ‚¶Ñ r)
right-identity ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) = Id.refl (leaf x)
right-identity ‚¶É BinaryTreeApplicative ‚¶Ñ (l /\ r) =
  ap2 _/\_ (right-identity ‚¶É BinaryTreeApplicative ‚¶Ñ l)
           (right-identity ‚¶É BinaryTreeApplicative ‚¶Ñ r)
‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) (leaf x') (leaf x‚Ä≥) =
  Id.refl (leaf (x , x' , x‚Ä≥))
‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) (leaf x') (l‚Ä≥ /\ r‚Ä≥) =
  ap2 _/\_ (‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) (leaf x') l‚Ä≥)
           (‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) (leaf x') r‚Ä≥)
‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) (l' /\ r') w =
  ap2 _/\_ (‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) l' w)
           (‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ (leaf x) r' w)
‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ (l /\ r) v w =
  ap2 _/\_ (‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ l v w)
           (‚ãÜ-assoc ‚¶É BinaryTreeApplicative ‚¶Ñ r v w)

private
  t-join : BinaryTree (BinaryTree X) ‚Üí BinaryTree X
t-join (leaf x) = x
t-join (l /\ r) = t-join l /\ t-join r

applicative ‚¶É BinaryTreeMonad ‚¶Ñ = BinaryTreeApplicative
join ‚¶É BinaryTreeMonad ‚¶Ñ = t-join
‚ãÜ-def ‚¶É BinaryTreeMonad ‚¶Ñ (leaf x) v = Id.refl (fmap (x ,_) v)
‚ãÜ-def ‚¶É BinaryTreeMonad ‚¶Ñ (l /\ r) v =
  ap2 _/\_ (‚ãÜ-def ‚¶É BinaryTreeMonad ‚¶Ñ l v)
           (‚ãÜ-def ‚¶É BinaryTreeMonad ‚¶Ñ r v)
associativity ‚¶É BinaryTreeMonad ‚¶Ñ = subrel $ fun-ext go
  where go : t-join {X = X} ‚àò map t-join ~ t-join ‚àò t-join
        go (leaf t) = Het.refl (t-join t)
        go (l /\ r) = ap2 _/\_ (go l) (go r)
unit1 ‚¶É BinaryTreeMonad ‚¶Ñ = subrel $ fun-ext go
  where go : {X : ùí∞ Àô} ‚Üí t-join {X = X} ‚àò fmap pure ~ id
        go (leaf x) = Het.refl (leaf x)
        go (l /\ r) = ap2 _/\_ (go l) (go r)
unit2 ‚¶É BinaryTreeMonad ‚¶Ñ = subrel $ fun-ext go
  where go : {X : ùí∞ Àô} ‚Üí t-join {X = X} ‚àò pure ~ id
        go (leaf x) = Het.refl (leaf x)
        go (l /\ r) = ap2 _/\_ (go l) (go r)
mon-naturality ‚¶É BinaryTreeMonad ‚¶Ñ f = subrel {sup = _==_} $ fun-ext go
  where go : t-join ‚àò fmap (fmap f) ~ fmap f ‚àò t-join
        go (leaf x) = Het.refl (fmap f x)
        go (l /\ r) = ap2 _/\_ (go l) (go r)
