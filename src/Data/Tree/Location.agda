{-# OPTIONS --safe --exact-split --prop  #-}
module Data.Tree.Location where

open import Data.Tree.Definition

open import Universes
open import Data.Nat hiding (l)

data Location : ùí∞‚ÇÄ Àô where
  leaf : Location
  branch : (n : ‚Ñï)(loc : Location) ‚Üí Location

open import Type.Sum hiding (_,_)
open import Data.List hiding (_!_[_])
open import Collection hiding (_++_)

shift : Location ‚Üí Location
shift leaf = leaf
shift (branch n x) = branch (n +1) x

locations : (t : Tree X) ‚Üí List Location
locations (leaf x) = [ leaf ]
locations ‚óª = []
locations (branch (h ‚à∑ br)) =
  map (branch 0) (locations h) ++ map shift (locations (branch br))

open import Proposition.Empty renaming (‚ä•-recursion to ‚ä•‚Çú-recursion)
open import Logic
open import Proof

leaf‚àâlocations-branch :
  (br : List (Tree X))
  ‚Üí ---------------------------
  leaf ‚àâ locations (branch br)
leaf‚àâlocations-branch (h ‚à∑ br) p
  with ‚ü∂ (‚àà++ (map (branch 0) (locations h))
               (map shift (locations (branch br)))) p
leaf‚àâlocations-branch (h ‚à∑ br) p | ‚à®left q
  with ‚ààmap‚Åª¬π (locations h) (branch 0) q
leaf‚àâlocations-branch (h ‚à∑ br) p | ‚à®left q | _ , ()
leaf‚àâlocations-branch (h ‚à∑ br) p | ‚à®right q
  with ‚ààmap‚Åª¬π (locations (branch br)) shift q
leaf‚àâlocations-branch (h ‚à∑ br) p | ‚à®right q | leaf , (_ , p') =
  leaf‚àâlocations-branch br p'

_!_[_] : (t : Tree X)(loc : Location)(p : loc ‚àà locations t) ‚Üí X
leaf x ! _ [ p ] = x
branch br ! leaf [ p ] = ‚ä•‚Çú-recursion _ (leaf‚àâlocations-branch br p)
branch (h ‚à∑ br) ! branch zero loc [ p ] = h ! loc [ p' p ]
  where p' : (p : branch 0 loc ‚àà locations (branch (h ‚à∑ br)))
             ‚Üí --------------------------------------------------
             loc ‚àà locations h
        p' p with ‚ü∂ (‚àà++ (map (branch 0) (locations h))
                          (map shift (locations (branch br)))) p
        p' p | ‚à®left q with ‚ààmap‚Åª¬π (locations h) (branch 0) q
        p' p | ‚à®left q | loc , (Id-refl _ , q') = q'
        p' p | ‚à®right q with ‚ààmap‚Åª¬π (locations (branch br)) shift q
        p' p | ‚à®right q | leaf , ()
        p' p | ‚à®right q | branch _ _ , ()
branch (h ‚à∑ br) ! branch (n +1) loc [ p ] = branch br ! branch n loc [ p' p ]
  where p' : (p : branch (n +1) loc ‚àà locations (branch (h ‚à∑ br)))
             ‚Üí --------------------------------------------------
             branch n loc ‚àà locations (branch br)
        p' p with ‚ü∂ (‚àà++ (map (branch 0) (locations h))
                          (map shift (locations (branch br)))) p
        p' p | ‚à®left q with ‚ààmap‚Åª¬π (locations h) (branch 0) q
        p' p | ‚à®left q | _ , ()
        p' p | ‚à®right q with ‚ààmap‚Åª¬π (locations (branch br)) shift q
        p' p | ‚à®right q | branch _ _ , (Id-refl _ , q') = q'
