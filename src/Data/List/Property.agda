{-# OPTIONS --safe --exact-split --prop  #-}
open import PropUniverses

module Data.List.Property {ùí∞ : Universe} where

open import Data.List.Definition
open import Data.List.Collection

open import Data.Nat
open import Data.Collection
open import Logic
open import Proposition.Identity
open import Proposition.Decidable

instance
  ListListable : {X : ùí∞ Àô} ‚Üí Listable (List X) X
  to-list ‚¶É ListListable ‚¶Ñ l = l
  ‚ü∂ (to-list-valid ‚¶É ListListable ‚¶Ñ) p = p
  ‚üµ (to-list-valid ‚¶É ListListable ‚¶Ñ) p = p

  ListRemovable : {X : ùí∞ Àô}
    ‚¶É d : ‚àÄ {x y : X} ‚Üí Decidable (x == y) ‚¶Ñ
    ‚Üí -----------------------------------
    Removable (List X) X
  remove ‚¶É ListRemovable ‚¶Ñ _ [] = []
  remove ‚¶É ListRemovable ‚¶Ñ x (h ‚à∑ _) with decide (h == x)
  remove ‚¶É ListRemovable ‚¶Ñ x (_ ‚à∑ t) | true _ = remove x t
  remove ‚¶É ListRemovable ‚¶Ñ x (h ‚à∑ t) | false _ = h ‚à∑ remove x t
  ‚ü∂ (remove-valid ‚¶É ListRemovable ‚¶É d ‚¶Ñ ‚¶Ñ {y = y}{h ‚à∑ t}) p
    with decide (h == y) ‚¶É d ‚¶Ñ
  ‚ü∂ (remove-valid ListRemovable {x}{y}{h ‚à∑ t}) p | true _ =
    x‚ààtail h (‚àßleft ih) , ‚àßright ih 
    where ih : x ‚àà t ‚àß x ‚â† y
          ih = ‚ü∂ remove-valid p
  ‚ü∂ (remove-valid ListRemovable {S = h ‚à∑ t}) (x‚ààx‚à∑ l) | false h‚â†y =
    x‚ààx‚à∑ t , h‚â†y
  ‚ü∂ (remove-valid ListRemovable {x}{y} {h ‚à∑ t}) (x‚ààtail h p) | false h‚â†y =
    x‚ààtail h (‚àßleft ih) , ‚àßright ih
    where ih : x ‚àà t ‚àß x ‚â† y
          ih = ‚ü∂ remove-valid p
  ‚üµ (remove-valid ‚¶É ListRemovable ‚¶É d ‚¶Ñ ‚¶Ñ {y = y}{h ‚à∑ t}) (x‚ààh‚à∑t , x‚â†y)
    with decide (h == y) ‚¶É d ‚¶Ñ
  ‚üµ (remove-valid ListRemovable {y = y} {h ‚à∑ t})
    ((x‚ààx‚à∑ t) , x‚â†y) | true h==y = ‚ä•-recursion (h ‚àà remove y t) (x‚â†y h==y)
  ‚üµ (remove-valid ListRemovable) (x‚ààtail _ x‚ààt , x‚â†y) | true _ =
    ‚üµ remove-valid (x‚ààt , x‚â†y)
  ‚üµ (remove-valid ListRemovable {y = y} {h ‚à∑ t})
    (x‚ààx‚à∑ t , x‚â†y) | false h‚â†y = x‚ààx‚à∑ remove y t
  ‚üµ (remove-valid ListRemovable {y = y} {h ‚à∑ t})
    (x‚ààtail h x‚ààt , x‚â†y) | false h‚â†y = x‚ààtail h (‚üµ remove-valid (x‚ààt , x‚â†y))

pattern [_] a‚ÇÄ = a‚ÇÄ ‚à∑ []
pattern [_‚∏¥_] a‚ÇÄ a‚ÇÅ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ []
pattern [_‚∏¥_‚∏¥_] a‚ÇÄ a‚ÇÅ a‚ÇÇ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ a‚ÇÇ ‚à∑ []
pattern [_‚∏¥_‚∏¥_‚∏¥_] a‚ÇÄ a‚ÇÅ a‚ÇÇ a‚ÇÉ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ a‚ÇÇ ‚à∑ a‚ÇÉ ‚à∑ []

remove-at : (n : ‚Ñï) (l : List X) (p : n < len l) ‚Üí List X
remove-at zero    (h ‚à∑ l) p = l
remove-at (suc n) (h ‚à∑ l) p = remove-at n l (s<s‚Üí-<- p)

open import Data.Functor

instance
  ListFunctor : Functor {ùí∞ = ùí∞} List
  fmap ‚¶É ListFunctor ‚¶Ñ _ [] = []
  fmap ‚¶É ListFunctor ‚¶Ñ f (h ‚à∑ t) = f h ‚à∑ fmap f t
  fmap-id ‚¶É ListFunctor ‚¶Ñ [] = refl []
  fmap-id ‚¶É ListFunctor ‚¶Ñ (h ‚à∑ t) = List== (refl h) (fmap-id t)
  fmap-‚àò ‚¶É ListFunctor ‚¶Ñ _ _ [] = refl []
  fmap-‚àò ‚¶É ListFunctor ‚¶Ñ g f (h ‚à∑ t) =
    List== (refl (g (f h))) (fmap-‚àò g f t)

open import Data.Maybe

module WithDecidableElement==
  {X : ùí∞ Àô}
  ‚¶É d : {x y : X} ‚Üí Decidable (x == y) ‚¶Ñ
  where
  
  find : (x : X) (l : List X) ‚Üí Maybe ‚Ñï
  find x [] = nothing
  find x (h ‚à∑ l) with decide (x == h)
  find x (h ‚à∑ l) | true  _ = just 0
  find x (h ‚à∑ l) | false _ = fmap suc (find x l)
  
  index : {x : X} {l : List X} (p : x ‚àà l) ‚Üí ‚Ñï
  index {x = x} {h ‚à∑ l} p with decide (x == h)
  index {x = x} {h ‚à∑ l} p | true   x==h = 0
  index {x = x} {h ‚à∑ l} p | false ¬¨x==h = suc (index (prev p))
    where open import Proposition.Empty
          prev : (p : x ‚àà h ‚à∑ l) ‚Üí x ‚àà l
          prev (x‚ààx‚à∑ t) = ‚ä•-recursion‚Çö (x ‚àà l) (¬¨x==h (refl x))
          prev (x‚ààtail _ p) = p
  
  multiplicity : (x : X) (l : List X) ‚Üí ‚Ñï
  multiplicity x [] = 0
  multiplicity x (h ‚à∑ l) with decide (x == h)
  multiplicity x (h ‚à∑ l) | true  _ = suc (multiplicity x l)
  multiplicity x (h ‚à∑ l) | false _ = multiplicity x l

open WithDecidableElement== public
