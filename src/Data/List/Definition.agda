{-# OPTIONS --safe --exact-split --prop  #-}
open import PropUniverses

module Data.List.Definition {ùí∞ : Universe} where

infixr 115 _‚à∑_
data List (X : ùí∞ Àô) : ùí∞ Àô where
  []  : List X
  _‚à∑_ : (h : X) (t : List X) ‚Üí List X

open import Data.Nat.Definition using (‚Ñï; zero; suc)
open import Data.Nat.Syntax
open Pattern
open import Data.Nat.Order

open import Proposition.Identity
open import Proposition.Empty

last : (l : List X)(p : l ‚â† []) ‚Üí X
last {X = X} [] p = ‚ä•-recursion X (p (refl []))
last (x ‚à∑ []) p = x
last (_ ‚à∑ h ‚à∑ l) p = last (h ‚à∑ l) Œª ()

pattern [_] a‚ÇÄ = a‚ÇÄ ‚à∑ []
pattern [_‚∏¥_] a‚ÇÄ a‚ÇÅ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ []
pattern [_‚∏¥_‚∏¥_] a‚ÇÄ a‚ÇÅ a‚ÇÇ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ a‚ÇÇ ‚à∑ []
pattern [_‚∏¥_‚∏¥_‚∏¥_] a‚ÇÄ a‚ÇÅ a‚ÇÇ a‚ÇÉ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ a‚ÇÇ ‚à∑ a‚ÇÉ ‚à∑ []


