{-# OPTIONS --safe --exact-split --prop  #-}
module Data.List.Operation.AfterProperty where

open import Data.List.Definition
open import Data.List.Property

open import Universes
open import Type.Sum hiding (_,_)
open import Collection
open import Data.Nat
open import Proof

infixr 110 _!_[_]
_!_[_] : (l : List X)(n : ‚Ñï)(p : n +1 ‚â§ len l) ‚Üí X
h ‚à∑ _ ! zero [ _ ] = h
_ ‚à∑ l ! suc n [ p ] = l ! n [ ap pred p ]

zip : (l‚ÇÄ : List X)(l‚ÇÅ : List Y)(p : len l‚ÇÄ == len l‚ÇÅ) ‚Üí List (X √ó Y)
zip [] [] p = []
zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ) p = (h‚ÇÄ Œ£., h‚ÇÅ) ‚à∑ zip l‚ÇÄ l‚ÇÅ (ap pred p)

open import Proposition.Sum
open import Data.List.Collection
open import Logic

‚àà-zip : ‚àÄ{X : ùí∞ Àô}{Y : ùí± Àô}
  (l‚ÇÄ : List X)
  (l‚ÇÅ : List Y)
  (p : len l‚ÇÄ == len l‚ÇÅ)
  {x : X}{y : Y}
  ‚Üí -----------------------
  let p' : ‚àÄ{i}(p : i +1 ‚â§ len l‚ÇÄ) ‚Üí i +1 ‚â§ len l‚ÇÅ
      p' {i} = Id.coe (ap (i +1 ‚â§_) p) in
  x Œ£., y ‚àà zip l‚ÇÄ l‚ÇÅ p
  ‚Üî
  ‚àÉ Œª i ‚Üí
    i +1 ‚â§ len l‚ÇÄ ‚àß·µà
    Œª p ‚Üí l‚ÇÄ ! i [ p ] == x ‚àß l‚ÇÅ ! i [ p' p ] == y
‚ü∂ (‚àà-zip [] [] p) ()
‚üµ (‚àà-zip [] [] p) (_ , ())
‚ü∂ (‚àà-zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ) p) (x‚ààx‚à∑ _) =
  0 , (s‚â§s $ z‚â§ len l‚ÇÄ , (Id.refl h‚ÇÄ , Id.refl h‚ÇÅ))
‚ü∂ (‚àà-zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ) p) (x‚ààtail _ q)
  with ‚ü∂ (‚àà-zip l‚ÇÄ l‚ÇÅ (ap pred p)) q
‚ü∂ (‚àà-zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ) p) (x‚ààtail _ q)
  | i , (i+1‚â§len-l‚ÇÄ , eqs) = i +1 , (s‚â§s i+1‚â§len-l‚ÇÄ , eqs)
‚üµ (‚àà-zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ) p) (zero , (_ , (Id.refl _ , Id.refl _))) =
  x‚ààx‚à∑ (zip l‚ÇÄ l‚ÇÅ (ap pred p))
‚üµ (‚àà-zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ) p) (i +1 , (s‚â§s i+1‚â§len , eqs)) =
  x‚ààtail (h‚ÇÄ Œ£., h‚ÇÅ) $ ‚üµ (‚àà-zip l‚ÇÄ l‚ÇÅ (ap pred p)) (i , (i+1‚â§len , eqs))
