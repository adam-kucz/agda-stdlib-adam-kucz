{-# OPTIONS --safe --exact-split  #-}
module Data.List.Operation.AfterProperty where

open import Data.List.Definition
open import Data.List.Property

open import Universes
open import Type.Sum
open import Collection
open import Data.Nat
open import Data.Maybe
open import Proof

infixr 110 _!_
_!_ : (l : List X)(n : ‚Ñï) ‚Üí Maybe X
[] ! _ = nothing
h ‚à∑ _ ! 0 = just h
_ ‚à∑ l ! (n +1) = l ! n

zip : (l‚ÇÄ : List X)(l‚ÇÅ : List Y) ‚Üí List (X √ó Y)
zip [] _ = []
zip (_ ‚à∑ _) [] = []
zip (h‚ÇÄ ‚à∑ l‚ÇÄ)(h‚ÇÅ ‚à∑ l‚ÇÅ) = (h‚ÇÄ , h‚ÇÅ) ‚à∑ zip l‚ÇÄ l‚ÇÅ

open import Data.List.Collection
open import Logic

‚àà-zip : ‚àÄ{X : ùí∞ Àô}{Y : ùí± Àô}
  (l‚ÇÄ : List X)
  (l‚ÇÅ : List Y)
  {x : X}{y : Y}
  ‚Üí -----------------------
  (x , y) ‚àà zip l‚ÇÄ l‚ÇÅ
  ‚Üî
  ‚àÉ Œª i ‚Üí i + 1 ‚â§ len l‚ÇÄ ‚àß (l‚ÇÄ ! i == just x ‚àß l‚ÇÅ ! i == just y)
‚ü∂ (‚àà-zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ)) (x‚ààx‚à∑ .(zip l‚ÇÄ l‚ÇÅ)) =
  0 , (s‚â§s (z‚â§ len l‚ÇÄ) , (Id.refl (just h‚ÇÄ) , Id.refl (just h‚ÇÅ)))
‚ü∂ (‚àà-zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ)) (x‚ààtail .(h‚ÇÄ , h‚ÇÅ) p) with ‚ü∂ (‚àà-zip l‚ÇÄ l‚ÇÅ) p
... | i , (q , q') =
  i +1 , (ap suc ‚¶É Relating-+-left-‚â§ ‚¶Ñ q , q')
‚üµ (‚àà-zip (h ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ))
  (0 , (_ , (Id.refl .(just h) , Id.refl .(just h‚ÇÅ)))) = x‚ààx‚à∑ (zip l‚ÇÄ l‚ÇÅ)
‚üµ (‚àà-zip (h‚ÇÄ ‚à∑ l‚ÇÄ) (h‚ÇÅ ‚à∑ l‚ÇÅ)) (i +1 , (s‚â§s q , eqs)) =
  x‚ààtail (h‚ÇÄ , h‚ÇÅ) $ ‚üµ (‚àà-zip l‚ÇÄ l‚ÇÅ) (i , (q , eqs))
