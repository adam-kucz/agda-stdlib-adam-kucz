{-# OPTIONS --exact-split --safe --prop #-}
module Data.Int.Definition where

open import Universes
open import Proposition.Identity hiding (refl)
open import Type.Quotient
import Type.Sum
open Type.Sum
open Type.Sum renaming (_,_ to _‚Ñ§,_) using () public
open import Data.Nat
open import Relation.Binary

_‚Ñ§‚âà_ _‚Ñ§‚âà'_ : BinRel ùí∞‚ÇÄ (‚Ñï √ó ‚Ñï)
-- a - b == c - d ‚Üî a + d == c + b
(a‚ÇÄ , a‚ÇÅ) ‚Ñ§‚âà (b‚ÇÄ , b‚ÇÅ) = a‚ÇÄ + b‚ÇÅ == b‚ÇÄ + a‚ÇÅ

‚Ñ§‚âà++-invariant : ‚àÄ m n ‚Üí (m , n) ‚Ñ§‚âà (m +1 , n +1)
‚Ñ§‚âà++-invariant = +-suc

open import Function hiding (_$_)

‚Ñ§-class : ‚Ñï √ó ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï
‚Ñ§-class (0 , n) = (0 , n)
‚Ñ§-class (m +1 , 0) = (m +1 , 0)
‚Ñ§-class (m +1 , n +1) = ‚Ñ§-class (m , n)

private
  instance
    ‚Ñ§-class-indempotent : Idempotent ‚Ñ§-class

idemp ‚¶É ‚Ñ§-class-indempotent ‚¶Ñ (0 , n) = refl (0 , n)
idemp ‚¶É ‚Ñ§-class-indempotent ‚¶Ñ (m +1 , 0) = refl (m +1 , 0)
idemp ‚¶É ‚Ñ§-class-indempotent ‚¶Ñ (m +1 , n +1) =
  idemp ‚¶É ‚Ñ§-class-indempotent ‚¶Ñ (m , n)

x ‚Ñ§‚âà' y = ‚Ñ§-class x == ‚Ñ§-class y

open import Data.Nat.Arithmetic.Subtraction.Unsafe
open import Logic renaming (_,_ to _‚àß,_)
open import Proof
open import Function.Proof
open import Operation.Binary hiding (left-inverse; right-inverse)

‚Ñ§-class-nneg : ‚àÄ{m n} ‚Üí n ‚â§ m ‚Üî ‚Ñ§-class (m , n) == (m - n , 0)
‚ü∂ ‚Ñ§-class-nneg (z‚â§ 0) = refl (0 , 0)
‚ü∂ ‚Ñ§-class-nneg (z‚â§ (m +1)) = refl (m +1 , 0)
‚ü∂ ‚Ñ§-class-nneg (s‚â§s p) = ‚ü∂ ‚Ñ§-class-nneg p
‚üµ (‚Ñ§-class-nneg {0} {0}) (Id.refl (0 ‚Ñ§, 0)) = refl 0
‚üµ (‚Ñ§-class-nneg {m +1} {0}) q = z‚â§ m +1
‚üµ (‚Ñ§-class-nneg {m +1} {n +1}) q = ap suc $ ‚üµ ‚Ñ§-class-nneg q

‚Ñ§-class-npos : ‚àÄ{m n} ‚Üí m ‚â§ n ‚Üî ‚Ñ§-class (m , n) == (0 , n - m)
‚ü∂ ‚Ñ§-class-npos (z‚â§ n) = refl (0 , n)
‚ü∂ ‚Ñ§-class-npos (s‚â§s p) = ‚ü∂ ‚Ñ§-class-npos p
‚üµ (‚Ñ§-class-npos {zero} {n}) q = z‚â§ n
‚üµ (‚Ñ§-class-npos {m +1} {n +1}) q = ap suc $ ‚üµ ‚Ñ§-class-npos q

open import Proposition.Decidable

is-‚Ñ§-class-fixpoint : ‚àÄ{x} ‚Üí
  x == ‚Ñ§-class x ‚Üî ‚àÉ Œª m ‚Üí x == (0 , m) ‚à® x == (m , 0)
‚ü∂ (is-‚Ñ§-class-fixpoint {m ‚Ñ§, n}) p with decide (n ‚â§ m)
... | true n‚â§m = m ‚àß, ‚à®right $ ap (m ‚Ñ§,_) prf
  where prf : n == 0
        prf = proof n === pr‚ÇÇ (m ‚Ñ§, n)           :by: refl n
                      === pr‚ÇÇ (‚Ñ§-class (m ‚Ñ§, n)) :by: ap pr‚ÇÇ p
                      === pr‚ÇÇ (m - n ‚Ñ§, 0)
                        :by: ap pr‚ÇÇ $ ‚ü∂ ‚Ñ§-class-nneg n‚â§m
                      === 0                      :by: refl 0
              qed
... | false ¬¨n‚â§m = n ‚àß, ‚à®left $ ap (_‚Ñ§, n) prf
  where prf : m == 0
        prf = proof m
                === pr‚ÇÅ (m ‚Ñ§, n)           :by: refl m
                === pr‚ÇÅ (‚Ñ§-class (m ‚Ñ§, n)) :by: ap pr‚ÇÅ p
                === 0
                  :by: ap pr‚ÇÅ $ ‚ü∂ ‚Ñ§-class-npos $ total-other ¬¨n‚â§m
              qed
‚üµ is-‚Ñ§-class-fixpoint (m ‚àß, ‚à®left (Id.refl (0 ‚Ñ§, m))) = refl (0 ‚Ñ§, m)
‚üµ is-‚Ñ§-class-fixpoint (0 ‚àß, ‚à®right (Id‚Çö.refl (0 ‚Ñ§, 0))) = refl (0 ‚Ñ§, 0)
‚üµ is-‚Ñ§-class-fixpoint (m +1 ‚àß, ‚à®right (Id‚Çö.refl (m +1 ‚Ñ§, 0))) =
  refl (m +1 ‚Ñ§, 0)

‚Ñ§‚âà‚Üî‚Ñ§‚âà' : ‚àÄ{x y} ‚Üí x ‚Ñ§‚âà y ‚Üî x ‚Ñ§‚âà' y
‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {0 , m‚ÇÅ} {n‚ÇÄ , .(n‚ÇÄ + m‚ÇÅ)}) (Id‚Çö.refl .(n‚ÇÄ + m‚ÇÅ)) =
  proof 0 , m‚ÇÅ
    === 0 , m‚ÇÅ + n‚ÇÄ - n‚ÇÄ
      :by: ap (0 ,_) $ sym $ subrel $ left-inverse-of (_+ n‚ÇÄ) m‚ÇÅ
    === 0 , n‚ÇÄ + m‚ÇÅ - n‚ÇÄ
      :by: ap (Œª ‚Äî ‚Üí (0 , ‚Äî - n‚ÇÄ)) $ comm m‚ÇÅ n‚ÇÄ
    === ‚Ñ§-class (n‚ÇÄ , n‚ÇÄ + m‚ÇÅ)
      :by: sym $ ‚ü∂ ‚Ñ§-class-npos $ postfix (_+ m‚ÇÅ) n‚ÇÄ
  qed
‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , .(m‚ÇÄ + n‚ÇÅ +1)} {0 , n‚ÇÅ}) (Id.refl .(m‚ÇÄ + n‚ÇÅ +1)) =
  proof ‚Ñ§-class (m‚ÇÄ +1 , m‚ÇÄ + n‚ÇÅ +1)
    === 0 , m‚ÇÄ + n‚ÇÅ - m‚ÇÄ :by: ‚ü∂ ‚Ñ§-class-npos $ s‚â§s (postfix (_+ n‚ÇÅ) m‚ÇÄ)
    === 0 , n‚ÇÅ + m‚ÇÄ - m‚ÇÄ :by: ap (Œª ‚Äî ‚Üí 0 , ‚Äî - m‚ÇÄ) $ comm m‚ÇÄ n‚ÇÅ
    === 0 , n‚ÇÅ           :by: ap (0 ,_) $ subrel $ left-inverse-of (_+ m‚ÇÄ) n‚ÇÅ
  qed
‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , zero} {n‚ÇÄ +1 , zero}) p with prf
  where prf : m‚ÇÄ +1 == n‚ÇÄ +1
        prf = 
          proof m‚ÇÄ +1
            === m‚ÇÄ +1 + 0 :by: sym $ right-unit (m‚ÇÄ +1)
            === n‚ÇÄ +1 + 0 :by: p
            === n‚ÇÄ +1     :by: right-unit (n‚ÇÄ +1)
          qed
... | Id‚Çö.refl (m‚ÇÄ +1) = Id‚Çö.refl (m‚ÇÄ +1 , zero)
‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , zero} {n‚ÇÄ +1 , n‚ÇÅ +1}) p =
  ‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , zero} {n‚ÇÄ , n‚ÇÅ}) prf
  where prf : m‚ÇÄ + n‚ÇÅ +1 == n‚ÇÄ + 0
        prf = proof m‚ÇÄ + n‚ÇÅ +1
                === m‚ÇÄ + (n‚ÇÅ +1) :by: sym $ +-suc m‚ÇÄ n‚ÇÅ
                === n‚ÇÄ + 0       :by: ap pred p
              qed
‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , m‚ÇÅ +1} {n‚ÇÄ +1 , 0}) p =
  ‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ , m‚ÇÅ} {n‚ÇÄ +1 , 0}) prf
  where prf : m‚ÇÄ + 0 == n‚ÇÄ +1 + m‚ÇÅ
        prf = proof m‚ÇÄ + 0
                === n‚ÇÄ + (m‚ÇÅ +1) :by: ap pred p
                === n‚ÇÄ + m‚ÇÅ +1   :by: +-suc n‚ÇÄ m‚ÇÅ
              qed
‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , m‚ÇÅ +1} {n‚ÇÄ +1 , n‚ÇÅ +1}) p =
  ‚ü∂ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ , m‚ÇÅ} {n‚ÇÄ , n‚ÇÅ}) $ ap pred prf
  where prf : m‚ÇÄ + n‚ÇÅ +1 == n‚ÇÄ + m‚ÇÅ +1
        prf = proof m‚ÇÄ + n‚ÇÅ +1
                === m‚ÇÄ + (n‚ÇÅ +1) :by: sym $ +-suc m‚ÇÄ n‚ÇÅ
                === n‚ÇÄ + (m‚ÇÅ +1) :by: ap pred p
                === n‚ÇÄ + m‚ÇÅ +1   :by: +-suc n‚ÇÄ m‚ÇÅ
              qed
‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {zero , m‚ÇÅ} {zero , m‚ÇÅ}) (Id‚Çö.refl (0 , m‚ÇÅ)) = Id.refl m‚ÇÅ
‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {zero , m‚ÇÅ} {n‚ÇÄ +1 , n‚ÇÅ +1}) q =
  ap suc $ ‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {zero , m‚ÇÅ} {n‚ÇÄ , n‚ÇÅ}) q
‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , m‚ÇÅ +1} {zero , n‚ÇÅ}) q =
  ap suc $ ‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ , m‚ÇÅ} {zero , n‚ÇÅ}) q
‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , zero} {m‚ÇÄ +1 , zero}) (Id.refl .(m‚ÇÄ +1 , 0)) =
  refl (m‚ÇÄ +1 + 0) 
‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , zero} {n‚ÇÄ +1 , n‚ÇÅ +1}) q =
  proof m‚ÇÄ + (n‚ÇÅ +1) +1
    === m‚ÇÄ + n‚ÇÅ +2 :by: ap suc $ +-suc m‚ÇÄ n‚ÇÅ
    === n‚ÇÄ + 0 +1  :by: ap suc $ ‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , zero} {n‚ÇÄ , n‚ÇÅ}) q
  qed
‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , m‚ÇÅ +1} {n‚ÇÄ +1 , zero}) q =
  proof m‚ÇÄ + 0 +1
    === n‚ÇÄ + m‚ÇÅ +2      :by: ap suc $ ‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ , m‚ÇÅ} {n‚ÇÄ +1 , zero}) q
    === n‚ÇÄ + (m‚ÇÅ +1) +1 :by: ap suc $ sym $ +-suc n‚ÇÄ m‚ÇÅ
  qed
‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ +1 , m‚ÇÅ +1} {n‚ÇÄ +1 , n‚ÇÅ +1}) q =
  proof m‚ÇÄ + (n‚ÇÅ +1) +1
    === m‚ÇÄ + n‚ÇÅ +2      :by: ap suc $ +-suc m‚ÇÄ n‚ÇÅ
    === n‚ÇÄ + m‚ÇÅ +2      :by: ap _+2 $ ‚üµ (‚Ñ§‚âà‚Üî‚Ñ§‚âà' {m‚ÇÄ , m‚ÇÅ} {n‚ÇÄ , n‚ÇÅ}) q
    === n‚ÇÄ + (m‚ÇÅ +1) +1 :by: ap suc $ sym $ +-suc n‚ÇÄ m‚ÇÅ
  qed

‚Ñ§-impl : ‚Ñï √ó ‚Ñï / _‚Ñ§‚âà'_
class-of ‚¶É ‚Ñ§-impl ‚¶Ñ = ‚Ñ§-class
class-def ‚¶É ‚Ñ§-impl ‚¶Ñ {x}{y} = refl (‚Ñ§-class x == ‚Ñ§-class y)

‚Ñ§ : ùí∞‚ÇÄ Àô
‚Ñ§ = QuotientType ‚Ñ§-impl

to-int : ‚Ñï √ó ‚Ñï ‚Üí ‚Ñ§
to-int = as-quot ‚¶É ‚Ñ§-impl ‚¶Ñ

open import Proposition.Sum using (_,_) public
