{-# OPTIONS --safe --exact-split  #-}
module Data.Vec.Definition where

open import Universes
open import Data.Nat

infixr 115 _‚à∑_
data Vec (X : ùí∞ Àô) : (n : ‚Ñï) ‚Üí ùí∞ Àô where
  []  : Vec X 0
  _‚à∑_ : ‚àÄ {n} (h : X) (t : Vec X n) ‚Üí Vec X (suc n)

open import Data.Nat

head : ‚àÄ {m}(v : Vec X (m +1)) ‚Üí X
head (h ‚à∑ _) = h

tail : ‚àÄ {m}(v : Vec X (m +1)) ‚Üí Vec X m
tail (_ ‚à∑ t) = t

open import Proof
open import Data.Maybe

infixr 110 _!_
_!_ : (l : Vec X m) ‚Üí [ n ‚à∂ ‚Ñï ]‚áÄ X
[] ! _ = nothing
h ‚à∑ _ ! zero = just h
_ ‚à∑ l ! n +1 = l ! n

pattern [_] a‚ÇÄ = a‚ÇÄ ‚à∑ []
pattern [_‚∏¥_] a‚ÇÄ a‚ÇÅ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ []
pattern [_‚∏¥_‚∏¥_] a‚ÇÄ a‚ÇÅ a‚ÇÇ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ a‚ÇÇ ‚à∑ []
pattern [_‚∏¥_‚∏¥_‚∏¥_] a‚ÇÄ a‚ÇÅ a‚ÇÇ a‚ÇÉ = a‚ÇÄ ‚à∑ a‚ÇÅ ‚à∑ a‚ÇÇ ‚à∑ a‚ÇÉ ‚à∑ []

open import Logic

Vec== : ‚àÄ {m}
  {h1 h2 : X} {t1 t2 : Vec X m}
  ‚Üí -----------------------------------------
  h1 ‚à∑ t1 == h2 ‚à∑ t2 ‚Üî h1 == h2 ‚àß t1 == t2
‚ü∂ Vec== (Id.refl (h ‚à∑ t)) = refl h , refl t
‚üµ Vec== (Id.refl h , Id.refl t) = refl (h ‚à∑ t)

last : {m : ‚Ñï}(v : Vec X (m +1)) ‚Üí X
last [ h ] = h
last (_ ‚à∑ h‚ÇÅ ‚à∑ v) = last (h‚ÇÅ ‚à∑ v)

drop-last : (v : Vec X (m +1)) ‚Üí Vec X m
drop-last [ _ ] = []
drop-last (h‚ÇÄ ‚à∑ h‚ÇÅ ‚à∑ v) = h‚ÇÄ ‚à∑ drop-last (h‚ÇÅ ‚à∑ v)

-- delete-nth : (k : ‚Ñï)(p : k ‚â§ m)(v : Vec X (m +1)) ‚Üí Vec X m
-- delete-nth zero p (h ‚à∑ v) = v
-- delete-nth {m +1} (k +1) p (h ‚à∑ v) = h ‚à∑ delete-nth k (ap pred p) v

infixl 105 _++_
_++_ : ‚àÄ {m n}(v : Vec X m)(v' : Vec X n) ‚Üí Vec X (m + n)
[] ++ v' = v'
h ‚à∑ v ++ v' = h ‚à∑ (v ++ v')
