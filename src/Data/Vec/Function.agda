{-# OPTIONS --safe --exact-split --prop  #-}
module Data.Vec.Function where

open import Data.Vec.Definition
open import Data.Vec.Property

open import Universes
open import Data.List as L
  hiding ([_]; map; _++_; ‚àà++; last; drop-last; reverse; zip)
open import Collection hiding (_~_; _++_)

map : ‚àÄ {n}(f : X ‚Üí Y)(v : Vec X n) ‚Üí Vec Y n
map _ [] = []
map f (h ‚à∑ v) = f h ‚à∑ map f v

dmap : ‚àÄ {n}(v : Vec X n)(f : (x : X)(p : x ‚àà v) ‚Üí Y) ‚Üí Vec Y n
dmap [] _ = []
dmap (h ‚à∑ v) f = f h (x‚ààx‚à∑ v) ‚à∑ dmap v Œª x p ‚Üí f x (x‚ààtail h p)

open import Logic
open import Proof

dmap++ : ‚àÄ{X : ùí∞ Àô}{m n}
  (v‚ÇÄ : Vec X m)
  (v‚ÇÅ : Vec X n)
  (f : (x : X)(p : x ‚àà v‚ÇÄ ++ v‚ÇÅ) ‚Üí Y)
  ‚Üí ------------------------------
  dmap v‚ÇÄ (Œª x p ‚Üí f x (‚üµ (‚àà++ v‚ÇÄ v‚ÇÅ) $ ‚à®left p)) ++
  dmap v‚ÇÅ (Œª x p ‚Üí f x (‚üµ (‚àà++ v‚ÇÄ v‚ÇÅ) $ ‚à®right p))
  ==
  dmap (v‚ÇÄ ++ v‚ÇÅ) f
dmap++ [] [] f = Id-refl []
dmap++ [] (h ‚à∑ v‚ÇÅ) f = ap (f h _ ‚à∑_) $ dmap++ [] v‚ÇÅ Œª x p ‚Üí f x (x‚ààtail h p)
dmap++ (h ‚à∑ v‚ÇÄ) v‚ÇÅ f = ap (f h _ ‚à∑_) $ dmap++ v‚ÇÄ v‚ÇÅ Œª x p ‚Üí f x (x‚ààtail h p)

to-vec : (l : List X) ‚Üí Vec X (len l)
to-vec [] = []
to-vec (h ‚à∑ l) = h ‚à∑ to-vec l

open import Data.NonemptyList as NL hiding ([_])

nonempty-to-vec : (l : NonemptyList X) ‚Üí Vec X (len l)
nonempty-to-vec NL.[ x ] = [ x ]
nonempty-to-vec (h ‚à∑ l) = h ‚à∑ nonempty-to-vec l

open import Data.Nat

vec-to-nonempty-list : (v : Vec X (m +1)) ‚Üí NonemptyList X
vec-to-nonempty-list [ h ] = NL.[ h ]
vec-to-nonempty-list (h ‚à∑ h‚ÇÅ ‚à∑ v) = h ‚à∑ vec-to-nonempty-list (h‚ÇÅ ‚à∑ v)

-- open import Proposition.Identity hiding (refl)
open import Proposition.Empty renaming (‚ä•-recursion to ‚ä•‚Çú-recursion)
open import Proposition.Decidable
open import Relation.Binary hiding (_~_)
open import Proof

vec-remove :
  (x : X)
  (v : Vec X (m +1))
  (p : x ‚àà v)
  ‚¶É dec== : HasDecidableIdentity X ‚¶Ñ
  ‚Üí --------------------
  Vec X m
vec-remove x (h ‚à∑ v) p with decide (h == x)
vec-remove x (h ‚à∑ v) p | true _ = v
vec-remove {m = zero} x [ h ] p | false ¬¨p =
  ‚ä•‚Çú-recursion (Vec _ 0) (contradiction p)
  where contradiction : (p : x ‚àà [ h ]) ‚Üí ‚ä•
        contradiction (x‚ààx‚à∑ t) = ¬¨p $ Id-refl x
vec-remove {m = m +1} x (h ‚à∑ v) p | false ¬¨p =
  h ‚à∑ vec-remove x v (p' p)
  where p' : (p : x ‚àà h ‚à∑ v) ‚Üí x ‚àà v
        p' (x‚ààx‚à∑ t) = ‚ä•-recursion‚Çö (x ‚àà v) $ ¬¨p $ Id-refl x
        p' (x‚ààtail h p) = p

open import Function hiding (_$_)

to-vec-to-list : to-vec ‚àò (to-list {Col = Vec X m}) ~ id
to-vec-to-list [] = refl []
to-vec-to-list {X = X} (h ‚à∑ v) =
  Het.Id.ap2 {K = Œª m v ‚Üí Vec X (m +1)}
             (Œª m (v : Vec X m) ‚Üí h ‚à∑ v)
             (subrel $ vec-to-list-len v)
             (to-vec-to-list v)

to-list-to-vec : to-list ‚àò (to-vec {X = X}) ~ id
to-list-to-vec [] = refl []
to-list-to-vec (h ‚à∑ t) = ap (h ‚à∑_) $ to-list-to-vec t

reverse : (v : Vec X m) ‚Üí Vec X m
reverse [] = []
reverse v@(_ ‚à∑ _) = last v ‚à∑ reverse (drop-last v)

open import Type.Sum hiding (_,_)

zip : (v‚ÇÄ : Vec X m)(v‚ÇÅ : Vec Y m) ‚Üí Vec (X √ó Y) m
zip [] [] = []
zip (h‚ÇÄ ‚à∑ v‚ÇÄ) (h‚ÇÅ ‚à∑ v‚ÇÅ) = (h‚ÇÄ Œ£., h‚ÇÅ) ‚à∑ zip v‚ÇÄ v‚ÇÅ
