{-# OPTIONS --exact-split --safe --prop #-}
module Data.Nat.Arithmetic.Subtraction.Unsafe where

open import Data.Nat.Definition
open import Data.Nat.Order
open import Data.Nat.Syntax
open Pattern

infixl 130 _-_
_-_ : (m n : ‚Ñï) ‚Üí ‚Ñï
m - 0 = m
0 - (n +1) = 0
(m +1) - (n +1) = m - n

open import Data.Nat.Arithmetic.Subtraction.Definition
open import Proof

unsafe-is-safe : ‚àÄ{m n}(p : n ‚â§ m) ‚Üí m - n == (m - n [ p ])
unsafe-is-safe {m}{zero} p = Id.refl m
unsafe-is-safe {m +1}{n +1} p = unsafe-is-safe {m} (ap pred p)

open import Function hiding (_$_)
open import Data.Nat.Arithmetic.Definition

_-self== : ‚àÄ m ‚Üí m - m == 0
0 -self== = Id.refl zero
(m +1) -self== = m -self==

open import Function.Proof
open import Operation.Binary hiding (LeftInverse)

instance
  LeftZeroOf- : 0 IsLeftZeroOf _-_
  RightUnitOf- : 0 IsRightUnitOf _-_
  RelatingUnsafeSub-‚â§-‚â§ : Relating (_- m) _‚â§_ _‚â§_
  -- RelatingUnsafeSub-‚â§-‚â• : Relating (m -_) _‚â§_ _‚â•_
  LeftInverseUnsafeSub : LeftInverse (_+ m) (_- m)

left-zero ‚¶É LeftZeroOf- ‚¶Ñ zero = Id.refl 0
left-zero ‚¶É LeftZeroOf- ‚¶Ñ (y +1) = Id.refl 0

right-unit ‚¶É RightUnitOf- ‚¶Ñ = Id.refl

open import Data.Nat.Arithmetic.Property
left-inv ‚¶É LeftInverseUnsafeSub {m} ‚¶Ñ zero = subrel $ m -self==
left-inv ‚¶É LeftInverseUnsafeSub {0} ‚¶Ñ (n +1) = subrel $ right-unit (n +1)
left-inv ‚¶É LeftInverseUnsafeSub {m +1} ‚¶Ñ (n +1) = subrel {_P_ = Het._==_} (
  proof n + (m +1) - m
    === (n +1) + m - m
      :by: ap (_- m) $ +-suc n m
    === n +1
      :by: subrel $ left-inv ‚¶É LeftInverseUnsafeSub {m} ‚¶Ñ (n +1)
  qed)

rel-preserv ‚¶É RelatingUnsafeSub-‚â§-‚â§ {n} ‚¶Ñ (z‚â§ m) =
  proof 0 - n
    === 0        :by: left-zero n
    ‚å™ _‚â§_ ‚å™ m - n :by: z‚â§ (m - n)
  qed
rel-preserv ‚¶É RelatingUnsafeSub-‚â§-‚â§ {zero} ‚¶Ñ q@(s‚â§s _) = q
rel-preserv ‚¶É RelatingUnsafeSub-‚â§-‚â§ {k +1} ‚¶Ñ (s‚â§s {n} {m} n‚â§m) =
  rel-preserv ‚¶É RelatingUnsafeSub-‚â§-‚â§ {k} ‚¶Ñ n‚â§m

-suc : ‚àÄ a b ‚Üí
  a - suc b == a - b - 1
-suc a zero = Id.refl (a - 1)
-suc zero (b +1) = Id.refl 0
-suc (a +1) (b +1) = -suc a b

-comm : ‚àÄ a b c ‚Üí
  a - b - c == a - c - b
-comm a b zero = Id.refl (a - b)
-comm a zero (c +1) = Id.refl (a - (c +1))
-comm zero (b +1) (c +1) = Id.refl 0
-comm (a +1) (b +1) (c +1) =
  proof a - b - (c +1)
    === a - b - c - 1
      :by: -suc (a - b) c
    === a - c - b - 1
      :by: ap (_- 1) $ -comm a b c
    === a - c - (b +1)
      :by: sym $ -suc (a - c) b
  qed

open import PropUniverses

unsafe-prop-from-safe :
  (ùê¥ : ‚Ñï ‚Üí ùí∞ ·µñ)
  (p : m ‚â§ n)
  (q : ùê¥ (n - m [ p ]))
  ‚Üí ----------------------
  ùê¥ (n - m)
unsafe-prop-from-safe ùê¥ p q =
  Id.coe (ap ùê¥ $ sym $ unsafe-is-safe p) q
