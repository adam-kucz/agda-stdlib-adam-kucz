{-# OPTIONS --exact-split --safe --prop #-}
module Data.Nat.Order where

open import PropUniverses hiding (_‚äî_)
open import Data.Nat.Definition
open import Data.Nat.Syntax
open Pattern

open import Proposition.Identity renaming (Id‚Çö to Id) using (_==_; ap)
open import Proposition.Decidable.Definition
open import Relation.Binary.Property
open import Operation.Binary
open import Logic
open import Function.Proof

open import Proposition.Function using (_$_; _‚àò_)

infix 35 _<_ _>_
data _<_ : (m n : ‚Ñï) ‚Üí ùí∞‚ÇÄ ·µñ where
  z<s : ‚àÄ {n} ‚Üí 0 < suc n
  s<s : ‚àÄ {m n} ‚Üí n < m ‚Üí suc n < suc m

_>_ : (m n : ‚Ñï) ‚Üí ùí∞‚ÇÄ ·µñ
a > b = b < a

-<s : ‚àÄ {m n} ‚Üí (n<m : n < m) ‚Üí n < suc m
-<s z<s = z<s
-<s (s<s n<m) = s<s (-<s n<m)

s<s‚Üí-<- : ‚àÄ {m n} ‚Üí (p : suc n < suc m) ‚Üí n < m
s<s‚Üí-<- (s<s p) = p

-‚âÆ0 : ‚àÄ {n} ‚Üí ¬¨ n < 0
-‚âÆ0 ()

instance
  Irreflexive< : Irreflexive _<_
  irrefl ‚¶É Irreflexive< ‚¶Ñ 0 ()
  irrefl ‚¶É Irreflexive< ‚¶Ñ (suc n) sn<sn = irrefl n (s<s‚Üí-<- sn<sn)

  Asym< : Asymmetric _<_
  asym ‚¶É Asym< ‚¶Ñ z<s ()
  asym ‚¶É Asym< ‚¶Ñ (s<s a<b) (s<s b<a) = asym b<a a<b

  Transitive< : Transitive _<_
  trans ‚¶É Transitive< ‚¶Ñ z<s (s<s _) = z<s
  trans ‚¶É Transitive< ‚¶Ñ (s<s a<b) (s<s b<c) = s<s (trans a<b b<c)

  Decidable< : ‚àÄ {m n} ‚Üí Decidable (m < n)
  Decidable< {zero} {zero} = false (Œª ())
  Decidable< {zero} {suc n} = true z<s
  Decidable< {suc m} {zero} = false (Œª ())
  Decidable< {suc m} {suc n} with decide (m < n)
  Decidable< {suc m} {suc n} | true n<m = true (s<s n<m)
  Decidable< {suc m} {suc n} | false ¬¨n<m = false Œª m<n ‚Üí ¬¨n<m (s<s‚Üí-<- m<n)
  
  Relating-suc-< : Relating suc _<_ _<_
  rel-preserv ‚¶É Relating-suc-< ‚¶Ñ = s<s

  Postfix-suc-< : UniversalPostfix suc _<_
  UniversalPostfix.postfix Postfix-suc-< zero = z<s
  UniversalPostfix.postfix Postfix-suc-< (suc x) = s<s $ postfix suc x

infix 35 _‚â§_ _‚â•_
_‚â§_ _‚â•_ : (m n : ‚Ñï) ‚Üí ùí∞‚ÇÄ ·µñ
a ‚â§ b = a == b ‚à® a < b
a ‚â• b = b ‚â§ a

instance
  Reflexive‚â§ : Reflexive _‚â§_
  refl ‚¶É Reflexive‚â§ ‚¶Ñ a = ‚à®left (refl a)
  
  Transitive‚â§ : Transitive _‚â§_
  trans ‚¶É Transitive‚â§ ‚¶Ñ (‚à®left (Id.refl a)) a‚â§b = a‚â§b
  trans ‚¶É Transitive‚â§ ‚¶Ñ (‚à®right a<b) (‚à®left (Id.refl b)) = ‚à®right a<b
  trans ‚¶É Transitive‚â§ ‚¶Ñ (‚à®right a<b) (‚à®right b<c) = ‚à®right $ trans a<b b<c
  
  Antisym‚â§ : Antisymmetric _‚â§_
  antisym ‚¶É Antisym‚â§ ‚¶Ñ (‚à®left a==b) _ = a==b
  antisym ‚¶É Antisym‚â§ ‚¶Ñ (‚à®right _) (‚à®left b==a) = sym b==a
  antisym ‚¶É Antisym‚â§ ‚¶Ñ (‚à®right a<b) (‚à®right b<a) = ‚ä•-recursion _ (asym a<b b<a)

  Relating-suc-‚â§ : Relating suc _‚â§_ _‚â§_
  rel-preserv ‚¶É Relating-suc-‚â§ ‚¶Ñ (‚à®left (Id.refl x)) = refl (suc x)
  rel-preserv ‚¶É Relating-suc-‚â§ ‚¶Ñ (‚à®right a<b) = ‚à®right (ap suc a<b)

  Relating-pred-‚â§ : Relating pred _‚â§_ _‚â§_
  rel-preserv ‚¶É Relating-pred-‚â§ ‚¶Ñ (‚à®left (Id.refl x)) = refl (pred x)
  rel-preserv ‚¶É Relating-pred-‚â§ ‚¶Ñ (‚à®right (z<s {0})) = ‚à®left (refl 0)
  rel-preserv ‚¶É Relating-pred-‚â§ ‚¶Ñ (‚à®right (z<s {suc n})) = ‚à®right z<s
  rel-preserv ‚¶É Relating-pred-‚â§ ‚¶Ñ (‚à®right (s<s q)) = ‚à®right q

  Postfix-suc-‚â§ : UniversalPostfix suc _‚â§_
  UniversalPostfix.postfix Postfix-suc-‚â§ x = ‚à®right $ postfix suc x

  Prefix-pred-‚â§ : UniversalPrefix pred _‚â§_
  UniversalPrefix.prefix Prefix-pred-‚â§ 0 = ‚à®left (refl 0)
  UniversalPrefix.prefix Prefix-pred-‚â§ (suc x) = postfix suc x

-‚â§-‚Üî-<s : ‚àÄ {a b} ‚Üí a ‚â§ b ‚Üî a < suc b
‚ü∂ -‚â§-‚Üî-<s (‚à®left (Id.refl x)) = postfix suc x
‚ü∂ -‚â§-‚Üî-<s (‚à®right a<b) = -<s a<b
‚üµ -‚â§-‚Üî-<s (s<s (s<s a<b)) = ap suc $ ‚üµ -‚â§-‚Üî-<s $ s<s a<b
‚üµ -‚â§-‚Üî-<s (s<s (z<s {0})) = ap suc $ refl 0
‚üµ -‚â§-‚Üî-<s (s<s (z<s {suc n})) = ap suc $ ‚à®right z<s
‚üµ -‚â§-‚Üî-<s (z<s {0}) = refl 0
‚üµ -‚â§-‚Üî-<s (z<s {suc n}) = ‚à®right z<s

open import Proposition.Comparable

instance
  Comparable‚Ñï : {x y : ‚Ñï} ‚Üí Comparable _<_ x y
  Comparable‚Ñï {zero} {zero} = eq (refl 0)
  Comparable‚Ñï {zero} {suc y} = lt z<s
  Comparable‚Ñï {suc x} {zero} = gt z<s
  Comparable‚Ñï {suc x} {suc y} with compare x _<_ y
  Comparable‚Ñï {suc x} {suc y} | lt p = lt (ap suc p)
  Comparable‚Ñï {suc x} {suc y} | eq p = eq (ap suc p)
  Comparable‚Ñï {suc x} {suc y} | gt p = gt (ap suc p)

-<s‚Üî¬¨->- : ‚àÄ {a b} ‚Üí a < suc b ‚Üî ¬¨ a > b
‚ü∂ (-<s‚Üî¬¨->- {suc a} {zero}) (s<s ())
‚ü∂ -<s‚Üî¬¨->- (s<s a<sb) (s<s b<a) = ‚ü∂ -<s‚Üî¬¨->- a<sb b<a
‚üµ (-<s‚Üî¬¨->- {zero}) q = z<s
‚üµ (-<s‚Üî¬¨->- {suc a} {zero}) q = ‚ä•-recursion (suc a < 1) (q z<s)
‚üµ (-<s‚Üî¬¨->- {suc a} {suc b}) q = ap suc $ ‚üµ -<s‚Üî¬¨->- $ Œª a>b ‚Üí q (s<s a>b )

<‚Üí== : ‚àÄ {n m}
  (p : n < suc m)
  (q : ¬¨ n < m)
  ‚Üí ---------------
  n == m
<‚Üí== {n} {m} p q with compare n _<_ m
<‚Üí== {n} {m} p q | lt p‚ÇÅ = ‚ä•-recursion (n == m) (q p‚ÇÅ)
<‚Üí== {n} {m} p q | eq p‚ÇÅ = p‚ÇÅ
<‚Üí== {n} {m} p q | gt p‚ÇÅ = ‚ä•-recursion (n == m) (‚ü∂ -<s‚Üî¬¨->- p p‚ÇÅ)

infix 35 _<‚Çú_
_<‚Çú_ : (n m : ‚Ñï) ‚Üí ùí∞‚ÇÄ ·µñ
_ <‚Çú 0 = ‚ä•
0 <‚Çú suc _ = ‚ä§
suc n <‚Çú suc m = n <‚Çú m

infixl 120 _‚äì_ _‚äî_
_‚äì_ min : (x y : ‚Ñï) ‚Üí ‚Ñï
zero ‚äì _ = zero
suc _ ‚äì zero = zero
suc x ‚äì suc y = suc (x ‚äì y)

_‚äî_ max : (x y : ‚Ñï) ‚Üí ‚Ñï
zero ‚äî y = y
suc x ‚äî zero = suc x
suc x ‚äî suc y = suc (x ‚äî y)

min = _‚äì_
max = _‚äî_

instance
  min-comm : Commutative _‚äì_
  min-assoc : Associative _‚äì_
  min-0-left : 0 IsLeftZeroOf _‚äì_
  min-0-right : 0 IsRightZeroOf _‚äì_
  max-comm : Commutative _‚äî_
  max-assoc : Associative _‚äî_
  max-0-left : 0 IsLeftUnitOf _‚äî_
  max-0-right : 0 IsRightUnitOf _‚äî_

comm ‚¶É min-comm ‚¶Ñ zero zero = refl 0
comm ‚¶É min-comm ‚¶Ñ zero (suc b) = refl 0
comm ‚¶É min-comm ‚¶Ñ (suc a) zero = refl 0
comm ‚¶É min-comm ‚¶Ñ (suc a) (suc b) = ap suc $ comm a b
assoc ‚¶É min-assoc ‚¶Ñ zero y z = refl 0
assoc ‚¶É min-assoc ‚¶Ñ (x +1) zero z = refl 0
assoc ‚¶É min-assoc ‚¶Ñ (x +1) (y +1) zero = refl 0
assoc ‚¶É min-assoc ‚¶Ñ (x +1) (y +1) (z +1) = ap suc $ assoc x y z
left-zero ‚¶É min-0-left ‚¶Ñ _ = refl 0
right-zero ‚¶É min-0-right ‚¶Ñ zero = refl 0
right-zero ‚¶É min-0-right ‚¶Ñ (_ +1) = refl 0

comm ‚¶É max-comm ‚¶Ñ zero zero = refl 0
comm ‚¶É max-comm ‚¶Ñ zero (suc y) = refl (suc y)
comm ‚¶É max-comm ‚¶Ñ (suc x) zero = refl (suc x)
comm ‚¶É max-comm ‚¶Ñ (suc x) (suc y) = ap suc $ comm x y
assoc ‚¶É max-assoc ‚¶Ñ zero y z = refl (y ‚äî z)
assoc ‚¶É max-assoc ‚¶Ñ (x +1) zero z = refl (x +1 ‚äî z)
assoc ‚¶É max-assoc ‚¶Ñ (x +1) (y +1) zero = refl ((x ‚äî y) +1)
assoc ‚¶É max-assoc ‚¶Ñ (x +1) (y +1) (z +1) = ap suc $ assoc x y z
left-unit ‚¶É max-0-left ‚¶Ñ y = refl y
right-unit ‚¶É max-0-right ‚¶Ñ zero = refl 0
right-unit ‚¶É max-0-right ‚¶Ñ (y +1) = refl (y +1)

min== : ‚àÄ m n ‚Üí m ‚äì n == m ‚à® m ‚äì n == n
min== zero n = ‚à®left (refl 0)
min== (suc _) zero = ‚à®right (refl 0)
min== (suc m) (suc n) with min== m n
min== (suc m) (suc n) | ‚à®left min-m-n==m = ‚à®left $ ap suc min-m-n==m
min== (suc m) (suc n) | ‚à®right min-m-n==n = ‚à®right $ ap suc min-m-n==n

min‚â§ : ‚àÄ m n ‚Üí m ‚äì n ‚â§ m
min‚â§ zero n = refl 0
min‚â§ (m +1) zero = ‚à®right z<s
min‚â§ (m +1) (n +1) = ap suc (min‚â§ m n)

‚â§max : ‚àÄ m n ‚Üí m ‚â§ m ‚äî n
‚â§max zero zero = refl 0
‚â§max zero (n +1) = ‚à®right z<s
‚â§max (m +1) zero = refl (m +1)
‚â§max (m +1) (n +1) = ap suc (‚â§max m n)

‚â§‚Üímin== : ‚àÄ {m n} ‚Üí (p : n ‚â§ m) ‚Üí n ‚äì m == n
‚â§‚Üímin== (‚à®left (Id.refl n)) = ‚à®-contract (min== n n)
‚â§‚Üímin== (‚à®right z<s) = refl 0
‚â§‚Üímin== (‚à®right (s<s n<m)) = ap suc $ ‚â§‚Üímin== $ ‚à®right n<m

-- <induction :
--   {A : (n : ‚Ñï) ‚Üí ùí∞ ·µñ}
--   (f : (n : ‚Ñï) ‚Üí ‚Ñï)
--   (p : UniversalPrefix f _<_)
--   ‚Üí -------------------
--   (n : ‚Ñï) ‚Üí B
-- <induction = {!!}

-- least-elem :
--   (ùê¥ : (n : ‚Ñï) ‚Üí ùí∞ ·µñ)
--   ‚¶É _ : ‚àÄ {n} ‚Üí Decidable (ùê¥ n) ‚¶Ñ
--   (e : Subset ‚Ñï ùê¥)
--   ‚Üí --------------------
--   Subset ‚Ñï ùê¥
-- least-elem ùê¥ e = smallest e
--   where open import Proposition.Sum
--         open import Data.Maybe
--         smaller : (n : ‚Ñï)
--           ‚Üí --------------------------------------------------
--           Maybe (Œ£‚Çö Œª (e' : Subset ‚Ñï ùê¥) ‚Üí elem e' < n)
--         smaller zero = nothing
--         smaller (suc n) with decide (ùê¥ n)
--         smaller (suc n) | true p = just (n , p , postfix suc n)
--         smaller (suc n) | false _ with smaller n
--         smaller (suc n) | false _ | nothing = nothing
--         smaller (suc n) | false _ | just (m , m<n) =
--           just (m , trans m<n $ postfix suc n)
--         smallest = {!!}

-- instance
--   WellFounded‚â§ : WellFounded _‚â§_ least-elem
--   well-founded ‚¶É WellFounded‚â§ ‚¶Ñ ùê¥ (elem , prop) = minimal
--     where minimal : Minimal (on-elems _‚â§_) (least-elem ùê¥ (elem , prop))
--           minimality ‚¶É minimal ‚¶Ñ {x} (‚à®left (Id.refl y)) = {!!}
--           minimality ‚¶É minimal ‚¶Ñ {x} (‚à®right q) = {!!}

