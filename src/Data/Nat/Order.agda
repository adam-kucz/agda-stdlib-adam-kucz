{-# OPTIONS --exact-split --safe --prop #-}
module Data.Nat.Order where

open import PropUniverses hiding (_‚äî_)
open import Data.Nat.Definition
open import Data.Nat.Syntax
open Pattern

open import Proposition.Identity
  renaming (refl to Id-refl) using (_==_; ap)
open import Proposition.Decidable.Definition
open import Function hiding (_$_; _~_)
open import Relation.Binary
open import Operation.Binary
open import Logic
open import Proof
open import Function.Proof

data _‚â§_ : BinRel ùí∞‚ÇÄ ‚Ñï where
  z‚â§_ : ‚àÄ m ‚Üí 0 ‚â§ m
  s‚â§s : (p : n ‚â§ m) ‚Üí n +1 ‚â§ m +1

infix 35 _‚â§_ _<_ _‚â•_ _>_
_<_ _‚â•_ _>_ suc_==_ : BinRel ùí∞‚ÇÄ ‚Ñï

_‚â•_ = flip _‚â§_
m < n = m ‚â§ n ‚àß m ‚â† n
_>_ = flip _<_

z<s_ : ‚àÄ m ‚Üí 0 < m +1
z<s m = z‚â§ (m +1) , Œª ()

suc m == n = m +1 == n
_rtc-‚â§_ = refl-trans-close suc_==_

instance
  Relating-suc-‚â§-single : Relating suc suc_==_ suc_==_

rel-preserv ‚¶É Relating-suc-‚â§-single ‚¶Ñ (Id-refl (m +1)) = refl (m +2)

open import Data.Nat.Arithmetic

private
  ‚àÉ+ : BinRel ùí∞‚ÇÄ ‚Ñï

‚àÉ+ n m = ‚àÉ Œª k ‚Üí k + n == m

rtc-‚â§-‚Üî-‚àÉ+ : m rtc-‚â§ n ‚Üî ‚àÉ+ m n
rtc-‚â§-‚Üî-‚àÉ+ = forw-dir , Œª { (k , p) ‚Üí back-dir k p}
  where open MakeComposable _rtc-‚â§_
        forw-dir : (p : m rtc-‚â§ n) ‚Üí ‚àÉ Œª k ‚Üí k + m == n
        forw-dir (rfl m) = 0 , refl m
        forw-dir (step {b = b +1} (Id-refl _) b+1‚â§n) with forw-dir b+1‚â§n
        forw-dir (step {_} {b +1} (Id-refl _) b+1‚â§n) | k , Id-refl _ =
          k +1 , sym $ +-suc k b
        back-dir : ‚àÄ k (p : k + m == n) ‚Üí m rtc-‚â§ n
        back-dir zero (Id-refl m) = refl m
        back-dir {m = m}{n} (k +1) p =
          proof m
            ‚å™ _rtc-‚â§_ ‚å™ k + m    :by: back-dir k $ refl (k + m)
            ‚å™ suc_==_ ‚å™ k + m +1 :by: refl (k + m +1) 
            ‚å™ _==_ ‚å™ n       :by: p
          qed

open import Logic.Proof

‚â§-‚Üî-‚àÉ+ : ‚àÄ {n m} ‚Üí n ‚â§ m ‚Üî ‚àÉ+ n m
‚ü∂ ‚â§-‚Üî-‚àÉ+ (z‚â§ m) = m , left-unit m
‚ü∂ ‚â§-‚Üî-‚àÉ+ (s‚â§s p) with ‚ü∂ ‚â§-‚Üî-‚àÉ+ p
‚ü∂ ‚â§-‚Üî-‚àÉ+ (s‚â§s p) | k , Id-refl .(k + _) = k , +-suc k _
‚üµ ‚â§-‚Üî-‚àÉ+ (zero , Id-refl zero) = z‚â§ 0
‚üµ ‚â§-‚Üî-‚àÉ+ (zero , Id-refl (m +1)) =
  s‚â§s $ ‚üµ (‚â§-‚Üî-‚àÉ+ {m}{m}) (0 , refl m)
‚üµ (‚â§-‚Üî-‚àÉ+ {zero}) (k +1 , Id-refl .(k + 0 +1)) = z‚â§ k + 0 +1
‚üµ (‚â§-‚Üî-‚àÉ+ {n +1}) (k +1 , Id-refl .(k + (n +1) +1)) =
  s‚â§s $ ‚üµ (‚â§-‚Üî-‚àÉ+ {n}) (k +1 , sym $ +-suc k n)

instance
  ‚â§-‚äÜ-rtc-‚â§ : _‚â§_ ‚äÜ _rtc-‚â§_
  rtc-‚â§-‚äÜ-‚â§ : _rtc-‚â§_ ‚äÜ _‚â§_

‚â§-‚Üî-rtc-‚â§ : ‚àÄ {n m} ‚Üí n ‚â§ m ‚Üî n rtc-‚â§ m
‚â§-‚Üî-rtc-‚â§ {n} {m} =
  proof n ‚â§ m
    ‚å™ _‚Üî_ ‚å™ ‚àÉ+ n m    :by: ‚â§-‚Üî-‚àÉ+
    ‚å™ _‚Üî_ ‚å™ n rtc-‚â§ m :by: sym rtc-‚â§-‚Üî-‚àÉ+
  qed

‚â§-‚äÜ-rtc-‚â§ = ‚Üî-‚Üí-‚äÜ ‚â§-‚Üî-rtc-‚â§
rtc-‚â§-‚äÜ-‚â§ = ‚Üî-‚Üí-‚äá ‚â§-‚Üî-rtc-‚â§

open import
  Relation.Binary.ReflexiveTransitiveClosure.Transfer _‚â§_ suc_==_
  public

module Composable-‚â§ where
  open MakeTransComposable _‚â§_ public

instance
  Antisym‚â§ : Antisymmetric _‚â§_
  Connex‚â§ : Connex _‚â§_
  Prefix-pred-‚â§ : UniversalPrefix pred _‚â§_
  Relating-pred-‚â§ : Relating pred _‚â§_ _‚â§_
  Decidable‚â§ : ‚àÄ {m n} ‚Üí Decidable (m ‚â§ n)

antisym ‚¶É Antisym‚â§ ‚¶Ñ (z‚â§ 0) (z‚â§ 0) = refl 0
antisym ‚¶É Antisym‚â§ ‚¶Ñ (s‚â§s p) (s‚â§s q) = ap suc $ antisym p q

total ‚¶É Connex‚â§ ‚¶Ñ zero y = ‚à®left $ z‚â§ y
total ‚¶É Connex‚â§ ‚¶Ñ (x +1) zero = ‚à®right $ z‚â§ x +1
total ‚¶É Connex‚â§ ‚¶Ñ (x +1) (y +1) = ‚à®[ s‚â§s ‚∏¥ s‚â§s ] (total x y)

UniversalPrefix.prefix Prefix-pred-‚â§ zero = refl 0
UniversalPrefix.prefix Prefix-pred-‚â§ (x +1) =
  subrel ‚¶É ~-‚äá ‚¶Ñ $ subrel $ Id-refl (x +1)

rel-preserv ‚¶É Relating-pred-‚â§ ‚¶Ñ {zero} {zero} rab = refl 0
rel-preserv ‚¶É Relating-pred-‚â§ ‚¶Ñ {zero} {b +1} rab = z‚â§ b
rel-preserv ‚¶É Relating-pred-‚â§ ‚¶Ñ {a +1} {b +1} (s‚â§s a‚â§b) = a‚â§b

Decidable‚â§ {zero} {n} = true (z‚â§ n)
Decidable‚â§ {m +1} {zero} = false Œª ()
Decidable‚â§ {m +1} {n +1} with Decidable‚â§ {m} {n}
Decidable‚â§ {m +1} {n +1} | true p = true (s‚â§s p)
Decidable‚â§ {m +1} {n +1} | false ¬¨p = false (Œª p' ‚Üí ¬¨p $ ap pred p')

-‚â§s : (n‚â§m : n ‚â§ m) ‚Üí n ‚â§ m +1
-‚â§s (z‚â§ m) = z‚â§ m +1
-‚â§s (s‚â§s n‚â§m) = s‚â§s $ -‚â§s n‚â§m

-‚â§self+1 : ‚àÄ m ‚Üí m ‚â§ m +1
-‚â§self+1 m = -‚â§s $ refl m

instance
  Irreflexive< : Irreflexive _<_
  Asym< : Asymmetric _<_
  Transitive< : Transitive _<_

irrefl ‚¶É Irreflexive< ‚¶Ñ m (_ , m‚â†m) = m‚â†m $ refl m

asym ‚¶É Asym< ‚¶Ñ (x‚â§y , x‚â†y) (y‚â§x , _) = x‚â†y $ antisym x‚â§y y‚â§x

trans ‚¶É Transitive< ‚¶Ñ (x‚â§y , x‚â†y) (y‚â§z , y‚â†z) =
  trans x‚â§y y‚â§z , trans‚â† (x‚â§y , x‚â†y) y‚â§z
  where trans‚â† : (p : n < m)(q : m ‚â§ k) ‚Üí n ‚â† k
        trans‚â† (z‚â§ 0 , 0‚â†0) (z‚â§ m) _ = 0‚â†0 $ refl 0
        trans‚â† (s‚â§s n‚â§m , n+1‚â†m+1) (s‚â§s q) r =
          trans‚â† (n‚â§m , Œª n==m ‚Üí n+1‚â†m+1 $ ap suc n==m) q $ ap pred r

s<s : (n<m : n < m) ‚Üí n +1 < m +1
s<s (n‚â§m , n‚â†m) = s‚â§s n‚â§m , ap suc n‚â†m

-<-‚Üîs‚â§- : n < m ‚Üî n +1 ‚â§ m
‚ü∂ -<-‚Üîs‚â§- (z‚â§ zero , 0‚â†0) = ‚ä•-recursion _ $ 0‚â†0 $ refl 0
‚ü∂ -<-‚Üîs‚â§- (z‚â§ (m +1) , _) = s‚â§s $ z‚â§ m
‚ü∂ -<-‚Üîs‚â§- (s‚â§s p , n+1‚â†m+1) =
  s‚â§s $ ‚ü∂ -<-‚Üîs‚â§- (p , Œª n==m ‚Üí n+1‚â†m+1 $ ap suc n==m)
‚üµ -<-‚Üîs‚â§- (s‚â§s (z‚â§ m)) = z‚â§ m +1 , Œª ()
‚üµ -<-‚Üîs‚â§- (s‚â§s (s‚â§s q)) = s<s $ ‚üµ -<-‚Üîs‚â§- (s‚â§s q)

-<s : (n<m : n < m) ‚Üí n < m +1
-<s n<m = ‚üµ -<-‚Üîs‚â§- $ -‚â§s $ ‚ü∂ -<-‚Üîs‚â§- n<m

-<self+1 : ‚àÄ m ‚Üí m < m +1
-<self+1 m = ‚üµ -<-‚Üîs‚â§- $ refl (m +1)

s<s‚Üí-<- : (n+1<m+1 : n +1 < m +1) ‚Üí n < m
s<s‚Üí-<- n+1<m+1 = ‚üµ -<-‚Üîs‚â§- $ ap pred $ ‚ü∂ -<-‚Üîs‚â§- n+1<m+1

-- -<s‚Üî¬¨->- : ‚àÄ {a b} ‚Üí a < suc b ‚Üî ¬¨ a > b
-- ‚ü∂ (-<s‚Üî¬¨->- {suc a} {zero}) (s<s ())
-- ‚ü∂ -<s‚Üî¬¨->- (s<s a<sb) (s<s b<a) = ‚ü∂ -<s‚Üî¬¨->- a<sb b<a
-- ‚üµ (-<s‚Üî¬¨->- {zero}) q = z<s
-- ‚üµ (-<s‚Üî¬¨->- {suc a} {zero}) q = ‚ä•-recursion (suc a < 1) (q z<s)
-- ‚üµ (-<s‚Üî¬¨->- {suc a} {suc b}) q = ap suc $ ‚üµ -<s‚Üî¬¨->- $ Œª a>b ‚Üí q (s<s a>b )

-- <‚Üí== : ‚àÄ {n m}
--   (p : n < suc m)
--   (q : ¬¨ n < m)
--   ‚Üí ---------------
--   n == m
-- <‚Üí== {n} {m} p q with compare n _<_ m
-- <‚Üí== {n} {m} p q | lt p‚ÇÅ = ‚ä•-recursion (n == m) (q p‚ÇÅ)
-- <‚Üí== {n} {m} p q | eq p‚ÇÅ = p‚ÇÅ
-- <‚Üí== {n} {m} p q | gt p‚ÇÅ = ‚ä•-recursion (n == m) (‚ü∂ -<s‚Üî¬¨->- p p‚ÇÅ)

infix 35 _‚â§‚Çú_ _<‚Çú_
_‚â§‚Çú_ _<‚Çú_ : BinRel ùí∞‚ÇÄ ‚Ñï
0 ‚â§‚Çú _ = ‚ä§
_ +1 ‚â§‚Çú 0 = ‚ä•
n +1 ‚â§‚Çú m +1 = n ‚â§‚Çú m

n <‚Çú m = n +1 ‚â§‚Çú m

infixl 120 _‚äì_ _‚äî_
_‚äì_ min : (x y : ‚Ñï) ‚Üí ‚Ñï
zero ‚äì _ = zero
suc _ ‚äì zero = zero
suc x ‚äì suc y = suc (x ‚äì y)

_‚äî_ max : (x y : ‚Ñï) ‚Üí ‚Ñï
zero ‚äî y = y
suc x ‚äî zero = suc x
suc x ‚äî suc y = suc (x ‚äî y)

min = _‚äì_
max = _‚äî_

instance
  min-comm : Commutative _‚äì_
  min-assoc : Associative _‚äì_
  min-0-left : 0 IsLeftZeroOf _‚äì_
  min-0-right : 0 IsRightZeroOf _‚äì_
  max-comm : Commutative _‚äî_
  max-assoc : Associative _‚äî_
  max-0-left : 0 IsLeftUnitOf _‚äî_
  max-0-right : 0 IsRightUnitOf _‚äî_

comm ‚¶É min-comm ‚¶Ñ zero zero = refl 0
comm ‚¶É min-comm ‚¶Ñ zero (suc b) = refl 0
comm ‚¶É min-comm ‚¶Ñ (suc a) zero = refl 0
comm ‚¶É min-comm ‚¶Ñ (suc a) (suc b) = ap suc $ comm a b
assoc ‚¶É min-assoc ‚¶Ñ zero y z = refl 0
assoc ‚¶É min-assoc ‚¶Ñ (x +1) zero z = refl 0
assoc ‚¶É min-assoc ‚¶Ñ (x +1) (y +1) zero = refl 0
assoc ‚¶É min-assoc ‚¶Ñ (x +1) (y +1) (z +1) = ap suc $ assoc x y z
left-zero ‚¶É min-0-left ‚¶Ñ _ = refl 0
right-zero ‚¶É min-0-right ‚¶Ñ zero = refl 0
right-zero ‚¶É min-0-right ‚¶Ñ (_ +1) = refl 0

comm ‚¶É max-comm ‚¶Ñ zero zero = refl 0
comm ‚¶É max-comm ‚¶Ñ zero (suc y) = refl (suc y)
comm ‚¶É max-comm ‚¶Ñ (suc x) zero = refl (suc x)
comm ‚¶É max-comm ‚¶Ñ (suc x) (suc y) = ap suc $ comm x y
assoc ‚¶É max-assoc ‚¶Ñ zero y z = refl (y ‚äî z)
assoc ‚¶É max-assoc ‚¶Ñ (x +1) zero z = refl (x +1 ‚äî z)
assoc ‚¶É max-assoc ‚¶Ñ (x +1) (y +1) zero = refl ((x ‚äî y) +1)
assoc ‚¶É max-assoc ‚¶Ñ (x +1) (y +1) (z +1) = ap suc $ assoc x y z
left-unit ‚¶É max-0-left ‚¶Ñ y = refl y
right-unit ‚¶É max-0-right ‚¶Ñ zero = refl 0
right-unit ‚¶É max-0-right ‚¶Ñ (y +1) = refl (y +1)

min== : ‚àÄ m n ‚Üí m ‚äì n == m ‚à® m ‚äì n == n
min== zero n = ‚à®left (refl 0)
min== (suc _) zero = ‚à®right (refl 0)
min== (suc m) (suc n) with min== m n
min== (suc m) (suc n) | ‚à®left min-m-n==m = ‚à®left $ ap suc min-m-n==m
min== (suc m) (suc n) | ‚à®right min-m-n==n = ‚à®right $ ap suc min-m-n==n

min‚â§ : ‚àÄ m n ‚Üí m ‚äì n ‚â§ m
min‚â§ zero n = refl 0
min‚â§ (m +1) zero = z‚â§ (m +1)
min‚â§ (m +1) (n +1) = s‚â§s $ min‚â§ m n

‚â§max : ‚àÄ m n ‚Üí m ‚â§ m ‚äî n
‚â§max zero n = z‚â§ n
‚â§max (m +1) zero = refl (m +1)
‚â§max (m +1) (n +1) = s‚â§s $ ‚â§max m n 

‚â§‚Üímin== : (p : n ‚â§ m) ‚Üí n ‚äì m == n
‚â§‚Üímin== (z‚â§ m) = refl 0
‚â§‚Üímin== (s‚â§s p) = ap suc $ ‚â§‚Üímin== p

-- <induction :
--   {A : (n : ‚Ñï) ‚Üí ùí∞ ·µñ}
--   (f : (n : ‚Ñï) ‚Üí ‚Ñï)
--   (p : UniversalPrefix f _<_)
--   ‚Üí -------------------
--   (n : ‚Ñï) ‚Üí B
-- <induction = {!!}

-- least-elem :
--   (ùê¥ : (n : ‚Ñï) ‚Üí ùí∞ ·µñ)
--   ‚¶É _ : ‚àÄ {n} ‚Üí Decidable (ùê¥ n) ‚¶Ñ
--   (e : Subset ‚Ñï ùê¥)
--   ‚Üí --------------------
--   Subset ‚Ñï ùê¥
-- least-elem ùê¥ e = smallest e
--   where open import Proposition.Sum
--         open import Data.Maybe
--         smaller : (n : ‚Ñï)
--           ‚Üí --------------------------------------------------
--           Maybe (Œ£‚Çö Œª (e' : Subset ‚Ñï ùê¥) ‚Üí elem e' < n)
--         smaller zero = nothing
--         smaller (suc n) with decide (ùê¥ n)
--         smaller (suc n) | true p = just (n , p , postfix suc n)
--         smaller (suc n) | false _ with smaller n
--         smaller (suc n) | false _ | nothing = nothing
--         smaller (suc n) | false _ | just (m , m<n) =
--           just (m , trans m<n $ postfix suc n)
--         smallest = {!!}

-- instance
--   WellFounded‚â§ : WellFounded _‚â§_ least-elem
--   well-founded ‚¶É WellFounded‚â§ ‚¶Ñ ùê¥ (elem , prop) = minimal
--     where minimal : Minimal (on-elems _‚â§_) (least-elem ùê¥ (elem , prop))
--           minimality ‚¶É minimal ‚¶Ñ {x} (‚à®left (Id-refl y)) = {!!}
--           minimality ‚¶É minimal ‚¶Ñ {x} (‚à®right q) = {!!}

