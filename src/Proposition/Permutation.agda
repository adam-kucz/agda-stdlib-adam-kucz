{-# OPTIONS --safe --exact-split --prop  #-}
module Proposition.Permutation where

open import PropUniverses
open import Data.List
open import Relation.Binary
  renaming (refl to refl'; trans to trans')

private
  variable
    x y : X
    l l‚ÇÅ l‚ÇÇ l‚ÇÉ : List X

data Perm {X : ùí∞ Àô} : Rel ùí∞ (List X) (List X) where
  refl : (l : List X) ‚Üí Perm l l
  trans : (p : Perm l‚ÇÅ l‚ÇÇ) (q : Perm l‚ÇÇ l‚ÇÉ) ‚Üí Perm l‚ÇÅ l‚ÇÉ
  swap : (x y : X) (p : Perm l‚ÇÅ l‚ÇÇ) ‚Üí Perm (x ‚à∑ y ‚à∑ l‚ÇÅ) (y ‚à∑ x ‚à∑ l‚ÇÇ)
  step : (x : X) (p : Perm l‚ÇÅ l‚ÇÇ) ‚Üí Perm (x ‚à∑ l‚ÇÅ) (x ‚à∑ l‚ÇÇ)

instance
  ReflexivePerm : Reflexive (Perm {X = X})
  refl' ‚¶É ReflexivePerm ‚¶Ñ = refl

  TransitivePerm : Transitive (Perm {X = X})
  trans' ‚¶É TransitivePerm ‚¶Ñ = trans

  SymmetricPerm : Symmetric (Perm {X = X})
  sym ‚¶É SymmetricPerm ‚¶Ñ (refl l) = refl l
  sym ‚¶É SymmetricPerm ‚¶Ñ (trans p‚ÇÅ p‚ÇÇ) = trans (sym p‚ÇÇ) (sym p‚ÇÅ)
  sym ‚¶É SymmetricPerm ‚¶Ñ (swap x y p) = swap y x (sym p)
  sym ‚¶É SymmetricPerm ‚¶Ñ (step x p) = step x (sym p)
