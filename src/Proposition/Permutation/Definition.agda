{-# OPTIONS --safe --exact-split --prop  #-}
module Proposition.Permutation.Definition where

open import PropUniverses
open import Data.List
open import Relation.Binary
  renaming (refl to refl'; trans to trans')
  using (Rel; Reflexive; Transitive; Symmetric; sym)

private
  variable
    x y : X
    l l‚ÇÅ l‚ÇÇ l‚ÇÉ : List X

data _~_ {X : ùí∞ Àô} : Rel ùí∞ (List X) (List X) where
  refl : (l : List X) ‚Üí l ~ l
  trans : (p : l‚ÇÅ ~ l‚ÇÇ) (q : l‚ÇÇ ~ l‚ÇÉ) ‚Üí l‚ÇÅ ~ l‚ÇÉ
  swap : (x y : X) (p : l‚ÇÅ ~ l‚ÇÇ) ‚Üí x ‚à∑ y ‚à∑ l‚ÇÅ ~ y ‚à∑ x ‚à∑ l‚ÇÇ
  step : (x : X) (p : l‚ÇÅ ~ l‚ÇÇ) ‚Üí x ‚à∑ l‚ÇÅ ~ x ‚à∑ l‚ÇÇ

instance
  ReflexivePerm : Reflexive (_~_ {X = X})
  TransitivePerm : Transitive (_~_ {X = X})
  SymmetricPerm : Symmetric (_~_ {X = X})

refl' ‚¶É ReflexivePerm ‚¶Ñ = refl

trans' ‚¶É TransitivePerm ‚¶Ñ = trans

sym ‚¶É SymmetricPerm ‚¶Ñ (refl l) = refl l
sym ‚¶É SymmetricPerm ‚¶Ñ (trans p‚ÇÅ p‚ÇÇ) = trans (sym p‚ÇÇ) (sym p‚ÇÅ)
sym ‚¶É SymmetricPerm ‚¶Ñ (swap x y p) = swap y x (sym p)
sym ‚¶É SymmetricPerm ‚¶Ñ (step x p) = step x (sym p)

