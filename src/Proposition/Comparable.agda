{-# OPTIONS --exact-split --safe --prop #-}
module Proposition.Comparable where

open import PropUniverses
open import Relation.Binary.Definition
open import Proposition.Identity using (_==_)
open import Logic using (_‚à®_)

data Comparable {X : ùí∞ Àô} (_<_ : Rel ùí± X X) (x y : X) : ùí∞ ‚äî ùí± Àô where
  lt : (p : x < y) ‚Üí Comparable _<_ x y
  eq : (p : x == y) ‚Üí Comparable _<_ x y
  gt : (p : y < x) ‚Üí Comparable _<_ x y

compare :
  ‚àÄ x (_<_ : Rel ùí± X X) y
  ‚¶É _ : Comparable _<_ x y ‚¶Ñ
  ‚Üí Comparable _<_ x y
compare x _<_ y ‚¶É ord ‚¶Ñ = ord
