{-# OPTIONS --exact-split --safe --prop #-}
module Proposition.Identity.Homogeneous.Property where

open import Proposition.Identity.Homogeneous.Definition
  renaming (Id‚Çö to Id)

open import Universes
open import Relation.Binary.Property as Rel
open Rel using (Default-~) public
open import Function.Proof

instance
  EmptyIrreflexive : Irreflexive (empty-rel X X)
  EmptySymmetric : Symmetric (empty-rel X X)
  EmptyAsymmetric : Asymmetric (empty-rel X X)
  EmptyAntisymmetric : Antisymmetric (empty-rel X X)
  EmptyLeftQuasiReflexive : LeftQuasiReflexive (empty-rel X X)
  EmptyRightQuasiReflexive : RightQuasiReflexive (empty-rel X X)
  EmptyRelatingAll : ‚àÄ {f : (x : X) ‚Üí A x}
    ‚Üí Relating f (empty-rel X X) (Œª {x}{y} ‚Üí empty-rel (A x) (A y))

irrefl ‚¶É EmptyIrreflexive ‚¶Ñ _ ()
sym ‚¶É EmptySymmetric ‚¶Ñ ()
asym ‚¶É EmptyAsymmetric ‚¶Ñ ()
antisym ‚¶É EmptyAntisymmetric ‚¶Ñ ()
left-quasirefl ‚¶É EmptyLeftQuasiReflexive ‚¶Ñ ()
right-quasirefl ‚¶É EmptyRightQuasiReflexive ‚¶Ñ ()
rel-preserv ‚¶É EmptyRelatingAll ‚¶Ñ ()

open import Relation.Binary.ReflexiveTransitiveClosure

open import Logic

instance
  Id‚äÜrtc-empty : Id X ‚äÜ refl-trans-close (empty-rel X X)
  rtc-empty‚äÜId : refl-trans-close (empty-rel X X) ‚äÜ Id X 

private
  equiv : ‚àÄ {x y} ‚Üí x == y ‚Üî refl-trans-close (empty-rel X X) x y

‚ü∂ equiv (Id.refl x) = rfl x
‚üµ equiv (rfl x) = Id.refl x

Id‚äÜrtc-empty = ‚Üî-‚Üí-‚äÜ equiv
rtc-empty‚äÜId = ‚Üî-‚Üí-‚äá equiv

module TransferredProperties {X : ùí∞ Àô} where
  open import
    Relation.Binary.ReflexiveTransitiveClosure.Transfer
    (Id X)(empty-rel X X)‚¶É Default-~ ‚¶Ñ
    public
  instance
    SymmetricId = InheritsSymmetricR
    RelatingId = InheritsRelatingR

